#!/bin/sh
#
# Upgrade tool for BSD Router Project
# http://bsdrp.net
#
# Copyright (c) 2009-2016, The BSDRP Development Team
# All rights reserved.
# Based on the updatep1 and updatep2 script of nanoBSD
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

#######################
##  Example of Usage ##
#######################	

# Put the bziped _.disk.image on my-server, in the  home dir of my-user,
# and from the nanoBSD device, enter this command:
# ssh my-user@my-server cat _.disk.image.bz2 | bzcat | upgrade
# ssh my-user@my-server cat _.disk.image.xz | xzcat | upgrade

# Strict script
set -eu

# Variables
ARCH=`uname -m`
GPT=false

# A usefull function (from: http://code.google.com/p/sh-die/)
die() { echo -n "EXIT: " >&2; echo "$@" >&2; exit 1; }

#Load the NANO_DRIVE variable (ufs/BSDRP or gpt/BSDRP):
[ -f /etc/nanobsd.conf ] || die "No /etc/nanobsd.conf found"
. /etc/nanobsd.conf

#Extract LABEL name
LABEL=${NANO_DRIVE##*/}

# Get Label information for MBR
mbr_get_info() {
	# On a MBR system, partition number/name map is:
	# s1 is UFS with BSD slice a: first system partition (UFS label: NAMEs1a)
	# s2 if UFS with BSD slice a: second system partition (UFS label: NAMEs2a)

	if mount | grep -q "/dev/${NANO_DRIVE}s1a on / "; then 
		CURRENT_SLICE="s1"
		CURRENT_PART="1"
		NEXT_SLICE="s2"
		NEXT_PART="2"
	elif mount | grep -q "/dev/${NANO_DRIVE}s2a on / " ; then                
		CURRENT_SLICE="s2"
		CURRENT_PART="2"
		NEXT_SLICE="s1"
		NEXT_PART="1"
	else
    	die "Can't detect active slice"
	fi

	BSD_SLICE="a"
	NEXT_LABEL_ID="${NEXT_SLICE}${BSD_SLICE}"
	CURRENT_LABEL_ID="${CURRENT_SLICE}${BSD_SLICE}"

	# ufs/BSDRPs1a     N/A  aacd0s1a
	boot_dev=/dev/`glabel status | grep ${NANO_DRIVE}${CURRENT_LABEL_ID} | \
		awk '{ s=$3; sub(/s[12]a$/, "", s); print s; }'`
	[ -z "${boot_dev}" ] && die "Bug in mbr_get_info: boot_dev can't be empty"
	return 0
}

# Get Label information for MBR
gpt_get_info() {
	# On a GPT system, partition number/name map is:
	# p1 is msdosfs/EFI
	# p2 is freebsd-boot
	# p3 is first system with NAME1
	# p4 is second system with NAME2

	if mount | grep -q "/dev/${NANO_DRIVE}1 on / "; then
		CURRENT_SLICE="p3"
		CURRENT_PART="3"
		CURRENT_LABEL_ID="1"
		NEXT_SLICE="p4"
		NEXT_PART="4"
		NEXT_LABEL_ID="2"
	elif mount | grep -q "/dev/${NANO_DRIVE}2 on / " ; then
		CURRENT_SLICE="p4"
		CURRENT_PART="4"
		CURRENT_LABEL_ID="2"
		NEXT_SLICE="p3"
		NEXT_PART="3"
		NEXT_LABEL_ID="1"
	else
		die "Can't detect active slice"
	fi

	BSD_SLICE=""

	# gpt/BSDRP0     N/A  vtbd0p3	
	boot_dev=/dev/`glabel status | grep ${NANO_DRIVE}${CURRENT_LABEL_ID} | \
		awk '{ s=$3; sub(/p[34]$/, "", s); print s; }'`
	[ -z "${boot_dev}" ] && die "Bug in gpt_get_info: boot_dev can't be empty"
	return 0
}

get_info() {
	if ($GPT); then
		gpt_get_info
	else
		mbr_get_info
	fi
}

# Get label information for Sun VTOC
vtoc_get_info() {
	if mount | grep -q "/dev/${NANO_DRIVE}s1a on / "; then
    	DST_SLICE="d"
		DST_LABEL="${LABEL}s2a"
    	SRC_SLICE="a"
		SRC_LABEL="${LABEL}s1a"
		CURRENT_SLICE="s1"
		CURRENT_PART="a"
		NEXT_SLICE="d"
		NEXT_PART="d"
	elif mount | grep -q "/dev/${NANO_DRIVE}s2a on / " ; then
    	DST_SLICE="a"
		DST_LABEL="${LABEL}s1a"
    	SRC_SLICE="d"
		SRC_LABEL="${LABEL}s2a"
		CURRENT_SLICE="s2"
		CURRENT_PART="d"
		NEXT_SLICE="s1"
		NEXT_PART="a"
	else
    	die "Can't detect active slice"
	fi
	BSD_SLICE=""
	NEXT_LABEL_ID="${NEXT_SLICE}a"
	CURRENT_LABEL_ID="${CURRENT_SLICE}a"
	# ufs/BSDRPs1a     N/A  ada1a
	boot_dev=/dev/`glabel status | grep ${NANO_DRIVE}${CURRENT_LABEL_ID} | \
		awk '{ print $3; }'| sed 's/.$//'`
	return 0
}

write_new_image() {
	# Check if your destination disk exist
	[ -c ${boot_dev}${NEXT_SLICE} ] || die "${boot_dev}${NEXT_SLICE} is not a character special file"

	# Blow away old system.
	dd if=/dev/zero of=${boot_dev}${NEXT_SLICE} bs=1m count=1 > /dev/null 2>&1 || \
		die "ERROR: Can't initialize destination partition ${boot_dev}${NEXT_SLICE}"

	# Copy in new system
	dd of=${boot_dev}${NEXT_SLICE} obs=64k || \
		die "ERROR: Can't install the upgrade on ${boot_dev}${NEXT_SLICE}"

	# Check that it worked
	fsck_ffs -n ${boot_dev}${NEXT_SLICE}${BSD_SLICE} || \
		die "ERROR: New file system ${boot_dev}${NEXT_SLICE}${BSD_SLICE} check failed"

	# Set UFS label into the new slice
	if !($GPT); then
		tunefs -L ${LABEL}${NEXT_LABEL_ID} ${boot_dev}${NEXT_SLICE}${BSD_SLICE} || \
			die "ERROR: Can't put label on the new filesystem"
	fi

	# Need to tune some files on the new partition
	[ -d /tmp/sysupgrade ] || mkdir /tmp/sysupgrade

	mount /dev/${NANO_DRIVE}${NEXT_LABEL_ID} /tmp/sysupgrade || \
		die "ERROR: Can't mount new upgrade image"
	
	# Kept the /boot/loader.conf.local file
	if [ -f /boot/loader.conf.local ]; then
    	cp /boot/loader.conf.local /tmp/sysupgrade/boot || \
        	echo "WARNING: Can't backup /boot/loader.conf.local"
	fi

	# Preserve /boot.config if it's different or not existing
	# If "system dual-console" was used, this case is triggered
	# If user have changed serial speed, this case is triggered
	if [ -f /boot.config ]; then
		if ! cmp -s /boot.config /tmp/sysupgrade/boot.config; then
			cp /boot.config /tmp/sysupgrade/boot.config || \
       			echo "WARNING: Can't backup /boot.config"
		fi
	fi
	
	# Adapt fstab of the new system
	for f in /tmp/sysupgrade/etc/fstab /tmp/sysupgrade/conf/base/etc/fstab /etc/fstab; do
	    sed -i "" "s/${LABEL}${CURRENT_LABEL_ID}/${LABEL}${NEXT_LABEL_ID}/g" $f
	done

	# Check if there is a post-upgrade script on the new image 
	# (This script will be start at the end of the upgrade process)
	if [ -f /tmp/sysupgrade/usr/local/sbin/post-upgrade ]; then
		cp /tmp/sysupgrade/usr/local/sbin/post-upgrade /tmp/post-upgrade || \
			echo "WARNING: Can't copy post-upgrade script!"
	fi

	umount /tmp/sysupgrade || die "ERROR: Can't umount new image"

	rm -r /tmp/sysupgrade || echo "WARNING: Can't remove tempdir"

	# Save the fstab to /cfg
	if mount | ! grep -q "/cfg"; then
		mount /cfg || die "ERROR: Cant't mount /cfg"
	fi
	if ! cp /etc/fstab /cfg; then
		umount /cfg || echo "Can't unmount /cfg"
		die "ERROR: Can't save fstab"
	fi
	umount /cfg || die "ERROR: Can't umount /cfg"
	return 0
}

mbr_boot_modif () {
	# Change the default selection of the boot manager
    boot0cfg -s ${NEXT_PART} -t 18 -v ${boot_dev} || \
        die "ERROR: Can't update FreeBSD bootloader"
	# Change the active partition
	gpart set -a active -i ${NEXT_PART} ${boot_dev} || \
		die "ERROR: Can't update active partition"
	return 0
}

gpt_boot_modif () {
	# Change the active partition
	gpart set -a bootme -i ${NEXT_PART} ${boot_dev} || \
		die "ERROR: Can't add bootme flag to new system slice"
	gpart unset -a bootme -i ${CURRENT_PART} ${boot_dev} || \
		die "ERROR: Can't remove bootme flag from old system slice"
	return 0
}

arm_boot_modif () {
	echo "arm upgrade script not tested!"	
	gpart set -a active -i ${NEXT_PART} ${boot_dev} || \
		die "ERROR: Can't update active partition"
	return 0
}

boot_modif () {
	if ($GPT); then
		gpt_boot_modif
	else
		mbr_boot_modif
	fi
	return 0
}

vtoc_boot_modif () {
	# Get the actual disk and remove the last caracter
	# Thanks for this tips hrs@ !
	DISK=`kenv currdev | sed 's/.$//'`
	# Now DISK is like that: /pci@1f,0/ide@d/disk@1,0:
	if eeprom boot-device=$DISK${NEXT_PART}; then
		# http://docs.oracle.com/cd/E19127-01/ultra25.ws/819-1892-12/nvram.html
		# "Initiates a warm boot where most NVRAM configuration parameters are read by 
		# OpenBoot PROM. With power cycling or a cold boot, all NVRAM configuration parameters
		# are read by the OpenBoot PROM."
		echo "WARNING: You need to do a cold reboot for forcing OBP to re-read just modified eeprom value"
	else
		echo "WARNING! Fail to eeprom boot-device=$DISK${NEXT_PART}"
	fi
}

#### main function

# Partition type detection
if grep -q '=gpt/' /etc/nanobsd.conf; then
	GPT=true
fi

case "${ARCH}" in
        i386|amd64)
			get_info
			write_new_image
			boot_modif
            ;;
        arm)
			echo "WARNING: This script was never tested on ARM"
			get_info
			write_new_image
            arm_boot_modif
            ;;
        sparc64)
			vtoc_get_info
			write_new_image
            vtoc_boot_modif
            ;;
        *)
            die "Unsupported arch!"
esac

# Log
echo "${LABEL} Upgrade complete"
logger ${LABEL} Upgrade complete

if [ -f /tmp/post-upgrade ]; then
	echo "Starting post-upgrade script..."
	logger Starting post-upgrade script
	chmod +x /tmp/post-upgrade
	# Execute post-upgrade script with new partition as parameter
	/tmp/post-upgrade /dev/${NANO_DRIVE}${NEXT_LABEL_ID}
fi
