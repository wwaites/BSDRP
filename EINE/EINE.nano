# BSD Router Project NanoBSD configuration file
# http://bsdrp.net
#
# NanoBSD port support added from Gitoyen:
# http://www.gitoyen.net/Howto-NanoBSD-quagga-router 
# Some cleanup idea taken from imp@ nanoBSD script
# Add other parts came from the FreeNAS 8 too (iXsystems)
#
################## Common section #################

# Console port speed
COM_SPEED=115200
# Where cust_pkg() finds packages to install
NANO_PACKAGE_DIR=${NANO_TOOLS}/Pkg
NANO_PACKAGE_LIST="*"

# Need to set early the NANO_ARCH variable for being use in the add_port function
# TARGET_ARCH was set by the make script
NANO_ARCH=${TARGET_ARCH}

# Options to put in make.conf during buildworld only
# BOOT_COMCONSOLE_SPEED is useless because we using /boot.config with -Sspeed option
CONF_BUILD='
MALLOC_PRODUCTION=
BOOT_BOOT0_COMCONSOLE_SPEED=0
'

# Options to put in make.conf during installworld only
# Do not use: WITHOUT_TOOLCHAIN=, because installing port need it
# Do not use: WITHOUT_INSTALLLIB=, because perl can't compile
# We would compile symbol files, but not install them by default
CONF_INSTALL=''

# Options to put in make.conf during both build- & installworld.
# See the file /usr/src/tools/build/options or man src.conf for details
# WITHOUT_FORTH= Needed for bootloader.
# WITHOUT_GROFF= incompatible with isc-dhcp-server (needed for build  man page)
# WITHOUT_KVM= and WITHOUT_KVM_SUPPORT= prevent buildworld to complet (don't know why)

CONF_WORLD='
WITHOUT_ACCT=
WITHOUT_AMD=
WITHOUT_APM=
WITHOUT_ASSERT_DEBUG=
WITHOUT_ATF=
WITHOUT_ATM=
WITHOUT_AUDIT=
WITHOUT_AUTHPF=
WITHOUT_AUTOFS=
WITHOUT_BLUETOOTH=
WITHOUT_BOOTPARAMD=
WITHOUT_BOOTPD=
WITHOUT_BSDINSTALL=
WITHOUT_CALENDAR=
WITHOUT_CCD=
WITHOUT_CTM=
WITHOUT_CVS=
WITHOUT_DICT=
WITHOUT_EE=
WITHOUT_EXAMPLES=
WITHOUT_FINGER=
WITHOUT_FLOPPY=
WITHOUT_FREEBSD_UPDATE=
WITHOUT_GAMES=
WITHOUT_GCOV=
WITHOUT_GDB=
WITHOUT_GNUCXX=
WITHOUT_GPIB=
WITHOUT_GPIO=
WITHOUT_HAST=
WITHOUT_HTML=
WITHOUT_ICONV=
WITHOUT_INFO=
WITHOUT_IPFILTER=
WITHOUT_IPX=
WITHOUT_IPX_SUPPORT=
WITHOUT_ISCSI=
WITHOUT_JAIL=
WITHOUT_KERBEROS=
WITHOUT_KERBEROS_SUPPORT=
WITHOUT_LIB32=
WITHOUT_LOCALES=
WITHOUT_LOCATE=
WITHOUT_LPR=
WITHOUT_NCP=
WITHOUT_NDIS=
WITHOUT_NETCAT=
WITHOUT_NIS=
WITHOUT_NLS=
WITHOUT_NLS_CATALOGS=
WITHOUT_NS_CACHING=
WITHOUT_PC_SYSINSTALL=
WITHOUT_PORTSNAP=
WITHOUT_PROFILE=
WITHOUT_QUOTAS=
WITHOUT_RBOOTD=
WITHOUT_RCMDS=
WITHOUT_RCS=
WITHOUT_RESCUE=
WITHOUT_ROUTED=
WITHOUT_SENDMAIL=
WITHOUT_SHAREDOCS=
WITHOUT_SVNLITE=
WITHOUT_SYSCONS=
WITHOUT_SYSINSTALL=
WITHOUT_TALK=
WITHOUT_TESTS=
WITHOUT_TESTS_SUPPORT=
WITHOUT_TFTP=
WITHOUT_TIMED=
WITHOUT_UNBOUND=
WITHOUT_USB_GADGET_EXAMPLES=
WITHOUT_ZFS=
WITH_GCC=
WITH_IDEA=
WITH_FAST_DEPEND=
WITH_DEBUG_FILES=
'

# Customize commands.
NANO_CUSTOMIZE=""

# Late customize commands.
NANO_LATE_CUSTOMIZE=""

# Newfs paramters to use
NANO_NEWFS="-b 4096 -f 512 -i 8192 -O1 -m 0"

# Number of code images on media (1 or 2)
NANO_IMAGES=2

# 0 -> Leave second image all zeroes so it compresses better.
# 1 -> Initialize second image with a copy of the first
NANO_INIT_IMG2=0

# Size of code file system in 512 bytes sectors
# If zero, size will be as large as possible.
NANO_CODESIZE=0

### HOW TO Calculate partition size ###
# If you want a 5MB partition, do:
# 5 * 1024 * 1024 / 512 = 10240

# Size of configuration file system in 512 bytes sectors
# Cannot be zero.
# about 15MB = 30720
NANO_CONFSIZE=30720

# Size of data file system in 512 bytes sectors
# If zero: no partition configured.
# If negative: max size possible
# This filesystem is used for archive configuration and
# for user customized scripts or tool
NANO_DATASIZE=30720

# Size of the /etc ramdisk in 512 bytes sectors
# 10240=5MB
NANO_RAM_ETCSIZE=30720

# Size of the /tmp+/var ramdisk in 512 bytes sectors
# 40960=20MB (usefull for log files)
NANO_RAM_TMPVARSIZE=40960

# Boot0cfg configuration mode
NANO_BOOT0CFG="-o packet -s 1 -m 3 -t 18"

# Backing type of md(4) device
# Can be "file" or "swap"
NANO_MD_BACKING="file"

# Label name
# Alphacharacter only
NANO_LABEL=${NANO_NAME}

# Progress Print level
PPLEVEL=3

# Add netblast/netrecieve and netmap tools
add_netrate () {
    TOOLS_LIST="cxgbetool cxgbtool crypto ifinfo mctest netmap netrate/netblast netrate/netreceive netrate/netsend"
    mkdir -p ${NANO_WORLDDIR}/dev
    mount -t devfs devfs ${NANO_WORLDDIR}/dev
    mount -t nullfs ${NANO_SRC} ${NANO_WORLDDIR}/usr/src
    mkdir -p ${NANO_WORLDDIR}/usr/workdir
    for TOOL in ${TOOLS_LIST}; do
        # netmap is not available on sparc64, and disabled on i386
        if [ ${NANO_ARCH} = "sparc64" -a ${TOOL} = "netmap" ]; then
        	continue
        fi
		if [ ${NANO_ARCH} = "i386" -a ${TOOL} = "netmap" ]; then
			continue
		fi
        export TOOL
        CR 'make clean -C /usr/src/tools/tools/${TOOL}'
       	CR 'env TARGET=${NANO_ARCH} TARGET_ARCH=${NANO_ARCH} \
            MACHINE=${NANO_ARCH} MACHINE_ARCH=${NANO_ARCH} OSVERSION=${FBSD_DST_OSVERSION} \
            UNAME_r=${FBSD_DST_RELEASE} UNAME_v=${FBSD_DST_RELEASE} \
            UNAME_p=${NANO_ARCH} UNAME_m=${NANO_ARCH} \
            make WRKDIRPREFIX=/usr/workdir -C /usr/src/tools/tools/${TOOL}'
        # each Makefile have a different variable names
        for MAKE_CMD in PROG PROGS ALL; do
            for file in `make -V $MAKE_CMD -C ${NANO_WORLDDIR}/usr/src/tools/tools/$TOOL`; do
                if file ${NANO_WORLDDIR}/usr/src/tools/tools/$TOOL/$file | grep -q "shared object"; then
                    mv ${NANO_WORLDDIR}/usr/src/tools/tools/$TOOL/$file ${NANO_WORLDDIR}/usr/local/lib
                else
                    mv ${NANO_WORLDDIR}/usr/src/tools/tools/$TOOL/$file ${NANO_WORLDDIR}/usr/local/bin
                fi
                if [ -f ${NANO_WORLDDIR}/usr/src/tools/tools/$TOOL/$file.o ]; then
                    if ! rm ${NANO_WORLDDIR}/usr/src/tools/tools/$TOOL/$file.o; then
                        echo "WARNING: Can't delete $TOOL/$file.o"
                    fi
                fi
            done # for all files
        done # for MAKE_CMD
    done # for TOOL
    rm -rf ${NANO_WORLDDIR}/usr/workdir
    umount ${NANO_WORLDDIR}/usr/src
    umount ${NANO_WORLDDIR}/dev
}

add_apuled () {
    mkdir -p ${NANO_WORLDDIR}/dev
    mount -t devfs devfs ${NANO_WORLDDIR}/dev
    mount -t nullfs ${NANO_SRC} ${NANO_WORLDDIR}/usr/src
    mkdir -p ${NANO_WORLDDIR}/tmp/apuled
    mount -t nullfs ${NANO_TOOLS}/tools/apuled ${NANO_WORLDDIR}/tmp/apuled
    mkdir -p ${NANO_WORLDDIR}/usr/workdir
    CR 'env TARGET=${NANO_ARCH} TARGET_ARCH=${NANO_ARCH} \
        MACHINE=${NANO_ARCH} MACHINE_ARCH=${NANO_ARCH} OSVERSION=${FBSD_DST_OSVERSION} \
        UNAME_r=${FBSD_DST_RELEASE} UNAME_v=${FBSD_DST_RELEASE} \
        UNAME_p=${NANO_ARCH} UNAME_m=${NANO_ARCH} \
        make WRKDIRPREFIX=/usr/workdir -C /tmp/apuled/'
    mv ${NANO_WORLDDIR}/tmp/apuled/apuled.ko ${NANO_WORLDDIR}/boot/modules/
    CR 'make WRKDIRPREFIX=/usr/workdir -C /tmp/apuled/ clean'
    rm -rf ${NANO_WORLDDIR}/usr/workdir
    umount ${NANO_WORLDDIR}/usr/src
    umount ${NANO_WORLDDIR}/tmp/apuled
    umount ${NANO_WORLDDIR}/dev
    rm -r ${NANO_WORLDDIR}/tmp/apuled
}

# Need to check if this function works with cross-compiling architecture!!!!
# Recursive complex fonction: Generate one function for each ports
add_port () {
	port=`echo $1 | sed -e 's/\//_/'`
	# Check if package allready exist
	cd ${PORTS_SRC}/$1
	# Warning: a package name can change regarding the build option
	if [ $# -gt 1 ]; then
		PKG_NAME=`env PORTSDIR=${PORTS_SRC} make package-name "$2"`
	else
		PKG_NAME=`env PORTSDIR=${PORTS_SRC} make package-name`
	fi
	if [ -f ${NANO_OBJ}/ports/packages/All/${PKG_NAME}.txz ]; then
	# Pkg file found: Generate add_pkg_NAME function
		#Don't try to install pkg, the boot strap will install it
		if [ "$1" != "ports-mgmt/pkg" ]; then
			eval "
			add_pkg_${port} () {
				#Need to create ${NANO_OBJ}/ports in this add_pkg_${port} function
				if [ ! -d \${NANO_OBJ}/ports ]; then
					mkdir -p \${NANO_OBJ}/ports/packages
				fi
				mkdir -p \${NANO_WORLDDIR}/usr/ports/packages
				mount -t nullfs \${NANO_OBJ}/ports/packages \
					\${NANO_WORLDDIR}/usr/ports/packages
				# Run ldconfig before
				CR '/sbin/ldconfig -m /lib /usr/lib /usr/lib/compat'
				# Start the pkg add
				# Create the repo configuration file
				mkdir -p \${NANO_WORLDDIR}/usr/local/etc/pkg/repos
				cat <<EOF > \${NANO_WORLDDIR}/usr/local/etc/pkg/repos/myrepo.conf
myrepo: {
 url: "file:///usr/ports/packages",
 enabled: true,
 signature_type: 'none',
 assume_always_yes: true
}
FreeBSD: {
    enabled: false
}
EOF
			# Bug with pkg: not using the "-d" option prevent to install the package with error message "pkg fail to extract static"
			# Need to force assume_always_yes for avoiding bootstrap pkg confirmation too
               	CR 'env ASSUME_ALWAYS_YES=true pkg -d add /usr/ports/packages/All/${PKG_NAME}.txz'
				umount \${NANO_WORLDDIR}/usr/ports/packages
				rmdir \${NANO_WORLDDIR}/usr/ports/packages
				rmdir \${NANO_WORLDDIR}/usr/ports
			}
       		customize_cmd add_pkg_${port}
       		"
		fi
	else
	# No pkg file: Generate add_port_NAME function
       	eval "
       	add_port_${port} () {
		#Need to create ${NANO_OBJ}/ports in this add_port_${port} function
		[ -d \${NANO_OBJ}/ports ] ||
		  mkdir -p \${NANO_OBJ}/ports/packages
       		mount -t nullfs \${NANO_SRC} \${NANO_WORLDDIR}/usr/src
		mkdir -p \${NANO_WORLDDIR}/usr/ports
       		mount -t nullfs \${PORTS_SRC} \${NANO_WORLDDIR}/usr/ports
		mkdir -p \${NANO_WORLDDIR}/usr/ports/packages
		mount -t nullfs \${NANO_OBJ}/ports/packages \
		  \${NANO_WORLDDIR}/usr/ports/packages
       		mkdir -p \${NANO_WORLDDIR}/dev
       		mount -t devfs devfs \${NANO_WORLDDIR}/dev
       		mkdir -p \${NANO_WORLDDIR}/usr/pobj
       		mkdir -p \${NANO_WORLDDIR}/usr/workdir
       		cp /etc/resolv.conf \${NANO_WORLDDIR}/etc/resolv.conf
		# If a port have NO_PACKAGE, comment-it
               	if grep -q NO_PACKAGE \${NANO_WORLDDIR}/usr/ports/$1/Makefile; then
               		mv \${NANO_WORLDDIR}/usr/ports/$1/Makefile \${NANO_WORLDDIR}/usr/ports/$1/Makefile.nanobsd
               		sed 's/NO_PACKAGE/\#NO_PACKAGE/g' \${NANO_WORLDDIR}/usr/ports/$1/Makefile.nanobsd > \${NANO_WORLDDIR}/usr/ports/$1/Makefile
               	fi
		# Run ldconfig before
		CR '/sbin/ldconfig -m /lib /usr/lib /usr/lib/compat'
		# Start the build
		# With staging (mandatory for creating user packag during "install"),
		# there is a bug if we use one command "make install package":
		# It failed during do-package call. We had to do a "make install" && "make package"
		# But this method failed if the port didn't support staging :-(
		# Now I have to found a solution for avoiding this two same long command
			if grep -q NO_STAGE \${NANO_WORLDDIR}/usr/ports/$1/Makefile; then
   					CR 'env TARGET=${NANO_ARCH} TARGET_ARCH=${NANO_ARCH} \
		  MACHINE=${NANO_ARCH} MACHINE_ARCH=${NANO_ARCH} OSVERSION=${FBSD_DST_OSVERSION} \
		  UNAME_r=${FBSD_DST_RELEASE} UNAME_v=${FBSD_DST_RELEASE} \
		  UNAME_p=${NANO_ARCH} UNAME_m=${NANO_ARCH} \
		  make WRKDIRPREFIX=/usr/workdir FETCH_ARGS=-pRr -C /usr/ports/$1 \
                  install package BATCH=yes -DWITH_PKGNG \
		  WITHOUT=\"NLS X11 DOCS EXAMPLES\" -DWITH_SSP_PORTS $2 clean'
			else
       			CR 'env TARGET=${NANO_ARCH} TARGET_ARCH=${NANO_ARCH} \
		  MACHINE=${NANO_ARCH} MACHINE_ARCH=${NANO_ARCH} OSVERSION=${FBSD_DST_OSVERSION} \
		  UNAME_r=${FBSD_DST_RELEASE} UNAME_v=${FBSD_DST_RELEASE} \
		  UNAME_p=${NANO_ARCH} UNAME_m=${NANO_ARCH} \
		  make WRKDIRPREFIX=/usr/workdir FETCH_ARGS=-pRr -C /usr/ports/$1 \
                  install BATCH=yes -DWITH_PKGNG \
		  WITHOUT=\"NLS X11 DOCS EXAMPLES\" -DWITH_SSP_PORTS $2 clean'
          		CR 'env TARGET=${NANO_ARCH} TARGET_ARCH=${NANO_ARCH} \
		  MACHINE=${NANO_ARCH} MACHINE_ARCH=${NANO_ARCH} OSVERSION=${FBSD_DST_OSVERSION} \
		  UNAME_r=${FBSD_DST_RELEASE} UNAME_v=${FBSD_DST_RELEASE} \
		  UNAME_p=${NANO_ARCH} UNAME_m=${NANO_ARCH} \
		  make WRKDIRPREFIX=/usr/workdir FETCH_ARGS=-pRr -C /usr/ports/$1 \
                  package BATCH=yes -DWITH_PKGNG \
		  WITHOUT=\"NLS X11 DOCS EXAMPLES\" -DWITH_SSP_PORTS $2 clean'
			fi
		rm \${NANO_WORLDDIR}/etc/resolv.conf
               	rm -rf \${NANO_WORLDDIR}/usr/obj
               	rm -rf \${NANO_WORLDDIR}/usr/pobj
               	rm -rf \${NANO_WORLDDIR}/usr/workdir
               	umount \${NANO_WORLDDIR}/dev
		umount \${NANO_WORLDDIR}/usr/ports/packages
		rmdir \${NANO_WORLDDIR}/usr/ports/packages
               	umount \${NANO_WORLDDIR}/usr/ports
               	rmdir \${NANO_WORLDDIR}/usr/ports
               	umount \${NANO_WORLDDIR}/usr/src
        }
        customize_cmd add_port_${port}
       	"
	fi
}

#### Ports list section #####

#bapt@ broke the "make package-recurisve" and he doesn't want to fix it using the fallacious argument of "it's dirty"
#=> Need to manually list all the package to install

add_port "ports-mgmt/pkg"

#Ansible and the WebGUI need python
add_port "print/indexinfo"
add_port "devel/readline"
add_port "devel/libffi"
add_port "lang/python27"
add_port "lang/python2"
add_port "devel/py-setuptools27"

# Add modules to the native FreeBSD bsnmpd daemon:
#add_port "net-mgmt/bsnmp-regex"
#add_port "net-mgmt/bsnmp-ucd"

# routing protocol
add_port "net/bird"
add_port "net/bird6" 

# DNS/DHCP server
add_port "math/gmp"
add_port "converters/libiconv"
add_port "dns/libidn"
add_port "security/nettle"
add_port "dns/dnsmasq" "WITH=\"IDN\""

# DHCPrelya
add_port "net/dhcprelya"

# Add tmux (screen equivalent, but better because BSD)
add_port "devel/libevent2"
add_port "sysutils/tmux" "WITH=\"LIBEVENT2\""

# Add ipmi tools
add_port "sysutils/ipmitool"

# Add sudo for fine permission management
add_port "security/sudo"

# Add freeradius (used on gateway as relay)
add_port "databases/gdbm"
add_port "devel/talloc" "WITH=\"NO_PYTHON\""
add_port "net/freeradius3" "WITHOUT=\"PERL\""

# Add openvpn
add_port "security/easy-rsa"
add_port "archivers/lzo2"
add_port "security/openvpn"
add_port "security/libgpg-error"
add_port "security/libgcrypt"
add_port "security/openvpn-auth-radius"

# Add simple Serial Terminal-server
#add_port "comms/conserver-com"
add_port "comms/ser2net"

# Add an IDPS
# Suricata crash after 5 seconds
#add_port "net/libnet"
#add_port "textproc/libyaml"
#add_port "devel/libhtp"
#add_port "security/suricata" "WITHOUT=\"PRELUDE JSON\""

add_port "devel/pcre"
add_port "net/libdnet"
add_port "net/libpcap"
add_port "net/daq"
add_port "net/libnet"
add_port "security/snort" "WITHOUT=\"PULLEDPORK BARNYARD\""

# Add monit
add_port "sysutils/monit"

# Add root CA certificate
add_port "security/ca_root_nss"

# Ansible (used on the manager only)
add_port "devel/py-yaml"
add_port "security/py-pycrypto"
add_port "security/py-ecdsa"
add_port "security/py-paramiko"
add_port "textproc/py-MarkupSafe"
add_port "devel/py-pytz"
add_port "devel/py-babel"
add_port "devel/py-Jinja2"
add_port "security/py-keyczar"
add_port "net/py-netaddr"
add_port "sysutils/ansible"

# Some python modules used by our helper scripts
  add_port "net/libmaxminddb"
  add_port "devel/py-ipaddr"
 add_port "net/py-maxminddb"
 add_port "www/py-requests"
add_port "net/py-GeoIP2"

# The webGUI framework
add_port "www/py-beaker"
add_port "www/py-bottle"
add_port "www/py-bottle-cork"

# Permit BIOS upgrade
 add_port "sysutils/dmidecode"
 # Curl is just a build-deps of cmake (needed by libftdi)
 # But curl need base kerberos, then we remove this deps
 # And we de-install curl on the custom script
  #add_port "security/ca_root_nss"
 add_port "ftp/curl" "WITH=\"GSSAPI_NONE\" WITHOUT=\"GSSAPI_BASE CA_BUNDLE\""
add_port "devel/libftdi" "WITHOUT=\"BOOST PYTHON\""
add_port "misc/pciids"
add_port "devel/libpci"
add_port "sysutils/flashrom"

# Crazy test of running linux VM
#add_port "sysutils/grub2-bhyve"

#### End of port list section ####

# Add netrate tools
customize_cmd add_netrate

# Add PC Engines APU LED drivers
customize_cmd add_apuled

cleanup_ports () {
		# When port are build, they install build dependency that are not usefull for running the port
		# The list of build-only package to be delete can be found like this:
		# Fresh generate a BSDRP image, and copy packages.info to packages.info.first
		# Restart a BSDRP image build with the "-b" option
		# diff packages.info.first packages.info
		set +e
        CR 'env ASSUME_ALWAYS_YES=true pkg delete -g auto* binutils-* cmake* curl* m4* gcc-* gmake* libtool* lua* gawk* perl* gettext* bison* help2man* mpfr-* mpc-* p5-gettext* libsigsegv* pkgconf*'
		# usr/local/lib/perl5 : Dirty hack
		#   pkg: rmdir(/usr/local/lib/perl5/5.14/perl/man/man3/): Directory not empty
		#   pkg didn't delete all MAN1 page related to perl too
		[ -d ${NANO_WORLDDIR}/usr/local/lib/perl5 ] && rm -rf ${NANO_WORLDDIR}/usr/local/lib/perl5
		[ -f ${NANO_WORLDDIR}/usr/local/man/man1/perl.1 ] && rm ${NANO_WORLDDIR}/usr/local/man/man1/perl*
        [ -f ${NANO_WORLDDIR}/tmp/PERL5_DEFAULT ] && rm ${NANO_WORLDDIR}/tmp/PERL5_DEFAULT
		set -e
}

customize_cmd cleanup_ports

# EINE custom function
eine_custom () {
	# Replace BSDRP_VERSION in /boot/brand.4th with the version number in etc/version
	sed -i "" -e /BSDRP_VERSION/s//`cat ${NANO_WORLDDIR}/etc/version`/ ${NANO_WORLDDIR}/boot/brand.4th
	# Update login.conf db
	CR 'cap_mkdb /etc/login.conf'
    DEMO=false
    # Get local EINE data (or DEMO.data) directory
    if [ -d ${NANO_TOOLS}/local.data ]; then
        DATA_DIR="${NANO_TOOLS}/local.data"
        DEMO=false
    else
        DATA_DIR="${NANO_TOOLS}/DEMO.data"
        echo "WARNING: DEMO mode enabled!"
        DEMO=true
    fi

    # Loading the project variables stored in $PROJECT/make.conf
    # After this variable will be available:
    # ADMIN_USERNAME
    # CONSOLE_PASSWORD
    # DOMAIN_NAME
    # GATEWAYS
    # OVPN_UNREG_PORT
    # OVPN_REG_PORT
    # SSH_PORT
    . ${DATA_DIR}/data.conf

    # To DO: Check if variables are not empty/unset
    
    if ! [ -f ${DATA_DIR}/GeoLite2-City.mmdb ]; then
        fetch -o ${DATA_DIR}/GeoLite2-City.mmdb.gz \
            http://geolite.maxmind.com/download/geoip/database/GeoLite2-City.mmdb.gz
        gunzip -c ${DATA_DIR}/GeoLite2-City.mmdb.gz > ${DATA_DIR}/GeoLite2-City.mmdb
    fi
    ! [ -d ${NANO_WORLDDIR}/usr/local/share/GeoIP ] && mkdir -p ${NANO_WORLDDIR}/usr/local/share/GeoIP
    cp ${DATA_DIR}/GeoLite2-City.mmdb ${NANO_WORLDDIR}/usr/local/share/GeoIP/ 

	# set the root password
	CR "echo ${CONSOLE_PASSWORD} | pw mod user root -h 0"

	# Create local admin account
    [ -d ${NANO_WORLDDIR}/usr/home ] || mkdir ${NANO_WORLDDIR}/usr/home
	CR "echo \"${ADMIN_USERNAME}:1001:0::0:0:Administrator:/usr/home/${ADMIN_USERNAME}:/bin/tcsh:${CONSOLE_PASSWORD}\" | adduser -f -"
	cp ${NANO_WORLDDIR}/root/.cshrc ${NANO_WORLDDIR}/usr/home/${ADMIN_USERNAME}/
	cp ${NANO_WORLDDIR}/root/.complete  ${NANO_WORLDDIR}/usr/home/${ADMIN_USERNAME}/
	# relocate /root/.ssh to /etc/dot.root.ssh
	# This permit to save ssh keys
	mkdir -p ${NANO_WORLDDIR}/etc/dot.ssh.${ADMIN_USERNAME}
	CR "chown ${ADMIN_USERNAME} /etc/dot.ssh.${ADMIN_USERNAME}"
	ln -s ../../../etc/dot.ssh.${ADMIN_USERNAME} ${NANO_WORLDDIR}/usr/home/${ADMIN_USERNAME}/.ssh
	CR "chown ${ADMIN_USERNAME} /usr/home/${ADMIN_USERNAME}/.ssh"
	# Then install the public ssh key
	if [ -f ${DATA_DIR}/id_ed25519.pub ]; then
		cp ${DATA_DIR}/id_ed25519.pub ${NANO_WORLDDIR}/usr/home/${ADMIN_USERNAME}/.ssh/authorized_keys
	else
		echo "Public SSH key file didn't found, need to be generated (and private key protected by a strong password):"
		echo "mkdir -p ${NANO_TOOLS}/keys; cd ${NANO_TOOLS}/keys"
		echo "ssh-keygen -t ed25519 -o -f id_ed25519"
		exit 1
	fi

    # Declare the port to be used for SSHd:
    echo "Port ${SSH_PORT}" >> ${NANO_WORLDDIR}/etc/ssh/sshd_config

	# configure ansible configuration file
    echo " ansible_ssh_port: ${SSH_PORT}" >> ${NANO_WORLDDIR}/usr/local/etc/ansible/group_vars/freebsd
	echo " ansible_ssh_user: ${ADMIN_USERNAME}" >> ${NANO_WORLDDIR}/usr/local/etc/ansible/group_vars/freebsd

    # Allow this port into the firewall:
    echo "firewall_myservices=\"${SSH_PORT}/tcp\"" >> ${NANO_WORLDDIR}/etc/rc.conf
    # Restrict SSHD to only accept conection from admin user:
    echo "AllowUsers ${ADMIN_USERNAME}" >> ${NANO_WORLDDIR}/etc/ssh/sshd_config

	# Put admin account in some usefull group
    CR "pw group mod operator -m ${ADMIN_USERNAME}"
	CR "pw group mod dialer -m ${ADMIN_USERNAME}"
	CR "chown ${ADMIN_USERNAME} /usr/home/${ADMIN_USERNAME}/.ssh/authorized_keys"
	# Permit users in wheel group to use sudo without password
	echo '%wheel ALL=(ALL) NOPASSWD: ALL' >> ${NANO_WORLDDIR}/usr/local/etc/sudoers
	# Permit /etc/hosts to be writeable by group wheel
	CR 'chmod g+w /etc/hosts /etc/rc.conf'
	# Ansible need to create a $HOME/.ansible/tmp folder
	# 1. relocate /home/${ADMIN_USERNAME}/.ansible to /etc/dot.${ADMIN_USERNAME}.ansible didn't works because after a boot, the restoration didn't keep owner
	# 2. Didn't reach to tune ansible.cfg for using "remote_tmp = /tmp", it seems ignored
	# 3. using a simple symlink for /tmp => .ansible
    ln -s /tmp ${NANO_WORLDDIR}/usr/home/${ADMIN_USERNAME}/.ansible
	CR "chown ${ADMIN_USERNAME} /usr/home/${ADMIN_USERNAME}/.ansible"

    # Need to use syslogd for openvpn (openvpn didn't like when newsyslogd rotate its own log file)
    echo "!openvpn" >> ${NANO_WORLDDIR}/etc/syslog.conf
    echo "*.*                 /var/log/openvpn.log" >> ${NANO_WORLDDIR}/etc/syslog.conf
    
    # Now, OpenVPN certificate files
    for file in ca.crt crl.pem dh1024.pem ta.key unregistered.crt unregistered.key; do
        if [ ! -f ${DATA_DIR}/keys/${file} ]; then
            echo "Error, missing ${DATA_DIR}/openvpn_certificates/${file}!"
            echo "You need to generate OpenVPN certificate like explain here:"
            echo "${NANO_WORLDDIR}/DEMO.keys/openvpn_certificates/generate-note.txt"
            exit 1
        else
            cp -pv ${DATA_DIR}/keys/${file} ${NANO_WORLDDIR}/usr/local/etc/openvpn/
        fi
    done

    # Declaring all default remote servers
    for server in ${GATEWAYS}; do
        echo "remote ${server}.${DOMAIN_NAME} ${OVPN_UNREG_PORT}" >> ${NANO_WORLDDIR}/usr/local/etc/openvpn/openvpn.conf
    done

    if (${DEMO}); then
        echo "DEMO MODE: Copy private SSH key and private certificate into the firmware"
        echo "Don't use these DEMO keys on Internet-connected machines"
        tar cvfz ${NANO_WORLDDIR}/root/DEMO.private.keys.tgz -C ${DATA_DIR} easy-rsa.vars id_ed25519 keys
    fi
	
	# turn on noatime for /cfg
	sed -i "" -e "/cfg/s/rw/rw,noatime/" ${NANO_WORLDDIR}/etc/fstab
	# Add /data partition to fstab (config script use it for archiving old configurations)
	echo "/dev/ufs/${NANO_LABEL}s4 /data ufs rw,noauto,failok 2 2" >> ${NANO_WORLDDIR}/etc/fstab
    # There is a problem around june 2014 with nanobsd: It didn't generate anymore the /data directory
    [ -d ${NANO_WORLDDIR}/data ] || mkdir -p ${NANO_WORLDDIR}/data

	# relocate /var/cron to /etc/cron
	# This permit to save crontab (only /etc and /usr/local/etc are saved)
	mkdir -p ${NANO_WORLDDIR}/etc/cron
	rm -rf ${NANO_WORLDDIR}/var/cron
	ln -s ../etc/cron ${NANO_WORLDDIR}/var/cron	
	
	# Add /etc/rc.conf.misc into the /etc/default/rc.conf
	sed -i "" -e "s/rc.conf.local/rc.conf.local \/etc\/rc.conf.misc/g" ${NANO_WORLDDIR}/etc/defaults/rc.conf

    # configure bsnmp
    cat <<EOF >>${NANO_WORLDDIR}/etc/snmpd.config

#
# bsnmp-ucd (8)
#
begemotSnmpdModulePath."ucd" = "/usr/local/lib/snmp_ucd.so"

#
# bsnmp-regex (8)
#
#begemotSnmpdModulePath."regex" = "/usr/local/lib/snmp_regex.so"
#           %regex
#           regexConfig = "/usr/local/etc/bsnmp-regex.conf"
#           regexSocket = "/var/run/bsnmp-regex.sock"
EOF

	# Compress the kernel (save 3Mb)
	if [ -f ${NANO_WORLDDIR}/boot/kernel/kernel ]; then
		if ! gzip -v9 ${NANO_WORLDDIR}/boot/kernel/kernel; then
			echo "Error during zipping the kernel"
		fi
	fi
	# Remove some of the folders (without share/snmp)
	# usr/include : 15MB
	FOLDERS_TO_REMOVE='
usr/libexec/bsdinstall
usr/local/include
usr/local/man
usr/local/info
usr/local/share/doc
usr/local/share/examples
usr/include
usr/share/examples
usr/share/info
usr/share/me
usr/share/pc-sysinstall
usr/share/openssl
usr/share/syscons
usr/libdata/lint
usr/libdata/ldscripts
'
	for c in $FOLDERS_TO_REMOVE
	do	
		if [ -d ${NANO_WORLDDIR}/$c ]
		then
			echo "Removing ${NANO_WORLDDIR}/$c"
			if ! rm -rf ${NANO_WORLDDIR}/$c ; then
				echo "Error: Can't remove it!"
			fi
		fi
	done

	# Remove some files
    FILES_TO_REMOVE='
boot/boot1.efi
boot/boot1.efifat
boot/loader.efi
sbin/hastd
sbin/hastctl
usr/sbin/ctladm
usr/bin/ctlstat
usr/local/etc/rc.d/freevrrpd.sh.sample
usr/share/misc/magic.mgc
usr/share/misc/termcap.db
'
    for c in ${FILES_TO_REMOVE}
    do
        if [ -f ${NANO_WORLDDIR}/$c ]
        then
			echo "Removing ${NANO_WORLDDIR}/$c"
            if ! rm -rf ${NANO_WORLDDIR}/$c ; then
				echo "Error: Can't remove it!"
			fi
        fi
    done

	# All ports are compiled, then we can remove all TOOLCHAIN files
	# This save about 25MB.
	# The list of these files was generated by a the output of:
	# usr/src/tools/tools/build_option_survey
	# Because it's a very time consuming script, output are online:
	# http://phk.freebsd.dk/misc/build_options_stable_8_210741/

TOOLCHAIN_TO_REMOVE='
usr/bin/addr2line
usr/bin/gnu-ar
usr/bin/as
usr/bin/ld
usr/bin/nm
usr/bin/objcopy
usr/bin/gnu-ranlib
usr/bin/readelf
usr/bin/size
usr/bin/strings
usr/bin/strip
usr/bin/cc
usr/bin/gcc
usr/bin/gcpp
usr/bin/cpp
usr/bin/c++
usr/bin/g++
usr/bin/CC
usr/bin/c++filt
usr/bin/gcov
usr/bin/gdb
usr/bin/gdbtui
usr/bin/kgdb
usr/bin/ar
usr/bin/ranlib
usr/bin/c89
usr/bin/c99
usr/bin/sum
usr/bin/compile_et
usr/bin/ctags
usr/bin/file2c
usr/bin/gprof
usr/bin/od
usr/bin/indent
usr/bin/m4
usr/bin/lex
usr/bin/lex++
usr/bin/flex
usr/bin/flex++
usr/bin/mt
usr/bin/mkstr
usr/bin/rpcgen
usr/bin/unifdef
usr/bin/unifdefall
usr/bin/nvi
usr/bin/vgrind
usr/bin/lint
usr/bin/xstr
usr/bin/lzdec
usr/bin/yacc
usr/bin/yyfix
usr/bin/byacc
usr/bin/lzdec
usr/bin/clang
usr/bin/clang++
usr/bin/clang-cpp
usr/bin/clang-tblgen
usr/bin/tblgen
usr/bin/crunchgen
usr/bin/crunchide
usr/libexec/cc1
usr/libexec/cc1plus
usr/libexec/cc1obj
usr/libexec/vfontedpr
usr/libexec/lint1
usr/libexec/lint2
usr/sbin/btxld
usr/sbin/config
usr/sbin/i2c
usr/sbin/rmt
usr/share/misc/gprof.flat
usr/share/misc/gprof.callg
usr/share/misc/vgrindefs
usr/share/misc/vgrindefs.db
usr/share/tmac/tmac.vgrind
'
    for c in $TOOLCHAIN_TO_REMOVE
    do
        if [ -f ${NANO_WORLDDIR}/$c ]; then
            echo "Removing ${NANO_WORLDDIR}/$c"
            if ! rm -rf ${NANO_WORLDDIR}/$c ; then
                echo "Error: Can't remove it!"
            fi
			# look for associated man page and delete it too
			if ! find ${NANO_WORLDDIR}/usr/share/man -name `basename $c`".*.gz" -exec rm -- {} +; then
				echo "no man page for $c"
			fi
		else
			echo "Missing file to delete: $c"
        fi
    done
	
	# Move termcap.small file
	if [ -f ${NANO_WORLDDIR}/etc/termcap.small ]; then
		mv ${NANO_WORLDDIR}/etc/termcap.small ${NANO_WORLDDIR}/usr/share/misc/termcap.db
	fi

	# Kill all .a's that are installed with TOOLCHAIN (remove 33MB)
    find ${NANO_WORLDDIR} -type f -name \*.a | xargs rm

	# Moving kerned & world debug symbols into debug.tar.xz file
	if [ -d ${NANO_WORLDDIR}/usr/lib/debug ]; then
		tar cfvZ ${NANO_OBJ}/debug.tar.xz -C ${NANO_WORLDDIR}/usr/lib debug
        rm -rf ${NANO_WORLDDIR}/usr/lib/debug
	fi
	# strip binaries for ports (tips from FreeNAS 8)
	pprint 4 "Stripping binaries and libraries"
	for dir in $(find ${NANO_WORLDDIR}/ -name '*bin' -or -name 'lib' -maxdepth 3); do
		for f in $(find $dir -type f); do
			strip 2>/dev/null $f || :
		done
	done	
	# Generate package inventory
	CR 'pkg info' > ${NANO_OBJ}/packages.info
}

# Enable only serial system only
bsdrp_console_serial () {
	# Enable getty on console
	sed -i "" -e /ttyu0/s/onifconsole/on/ ${NANO_WORLDDIR}/etc/ttys

    # Disable getty on syscons devices
    sed -i "" -e '/^ttyv[0-8]/s/on /off /' ${NANO_WORLDDIR}/etc/ttys

    # Tell loader to use serial console early.
    echo "-S${COM_SPEED} -h" > ${NANO_WORLDDIR}/boot.config

	# Don't need to customize /boot/loader.conf file because /boot.config is allready configured
	#echo 'boot_serial="YES"' >> ${NANO_WORLDDIR}/boot/loader.conf
	#echo "comconsole_speed=\"${COM_SPEED}\"" >> ${NANO_WORLDDIR}/boot/loader.conf
	#echo 'console="comconsole"' >> ${NANO_WORLDDIR}/boot/loader.conf
}

# Enable use of keyboard/vga and serial
#
###### Warning ####
# BUG TO FIX: Don't boot if no serial port available!
# Seems fixed:
# http://lists.freebsd.org/pipermail/freebsd-hackers/2012-September/040523.html
#
bsdrp_console_dual () {
    #sed -i "" -e /tty[du]0/s/off/on/ ${NANO_WORLDDIR}/etc/ttys
	#sed -i "" -e /tty[du]0/s/dialup/vt100/ ${NANO_WORLDDIR}/etc/ttys
    # Since r267591, 3wire is enabled
	#sed -i "" -e /tty[du]0/s/std.9600/3wire/ ${NANO_WORLDDIR}/etc/ttys

    # Tell loader to use serial and vga console.
    echo "-S${COM_SPEED} -Dh" > ${NANO_WORLDDIR}/boot.config

	# Don't need to customize the loader.conf file:
	#echo 'boot_multicons="YES"' >> ${NANO_WORLDDIR}/boot/loader.conf
	#echo "comconsole_speed=\"${COM_SPEED}\"" >> ${NANO_WORLDDIR}/boot/loader.conf
	#echo 'console="comconsole,vidconsole"' >> ${NANO_WORLDDIR}/boot/loader.conf
}

# Standard vga console, but permit serial port to be use as vt100 console
bsdrp_console_vga () {
	#sed -i "" -e /tty[du]0/s/off/on/ ${NANO_WORLDDIR}/etc/ttys
	#sed -i "" -e /tty[du]0/s/dialup/vt100/ ${NANO_WORLDDIR}/etc/ttys
    # Since r267591, 3wire is enabled
	#sed -i "" -e /tty[du]0/s/9600/${COM_SPEED}/ ${NANO_WORLDDIR}/etc/ttys

	# Set serial console speed (but not use it)                                                               
    echo "-S${COM_SPEED} -Dh" > ${NANO_WORLDDIR}/boot.config 
}

# Special xen console configuration
bsdrp_console_xen () {
	#Remove all default virtual terminal (in pv mode, need to check in hvm)
	sed -i '' '/^ttyv/d' ${NANO_WORLDDIR}/etc/ttys
	#Add a new xc0 console
	echo 'xc0     "/usr/libexec/getty Pc"         vt100   on  secure' >> ${NANO_WORLDDIR}/etc/ttys
	#Replace the default em0 by xn0 in rc.conf
	sed -i "" -e /ifconfig_/s/em0/xn0/ ${NANO_WORLDDIR}/etc/rc.conf
}

# From FreeNAS 8
shrink_md_fbsize()
{
	# We have a lot of little files on our memory disks. Let's decrease
	# the block and frag size to fit more little files on them (this
	# halves our space requirement by ~50% on /etc and /var on 8.x --
	# and gives us more back on 9.x as the default block and frag size
	# are 4 times larger).
	sed -i '' -e 's,-S -i 4096,-S -i 4096 -b 4096 -f 512,' \
		${NANO_WORLDDIR}/etc/rc.initdiskless
}
customize_cmd shrink_md_fbsize

# Secure BSDRP by using schg flag
bsdrp_secure () {
	# TODO: Need to check if flag allready set,
	#		otherwise it will disable it
	chflags -R schg ${NANO_WORLDDIR}/bin
	chflags -R schg ${NANO_WORLDDIR}/sbin
	chflags -R schg ${NANO_WORLDDIR}/boot/kernel
	chflags -R schg ${NANO_WORLDDIR}/libexec
	chflags -R schg ${NANO_WORLDDIR}/lib	
}

# Install Custom scripts and config files
customize_cmd cust_install_files

# Need to execute the eine_custom after the cust_install_files
customize_cmd eine_custom
