#!/bin/sh
#######################################
####  EINE Role configuration   #######
#######################################

#
# Copyright (c) 2014-2015, Orange
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
 
# Exit if error or variable undefined
set -eu

NIC_TYPE="re igb vtnet em vmx"

########### Function definition #############

# A usefull function (from: http://code.google.com/p/sh-die/)
die() { echo -n "EXIT: " >&2; echo "$@" >&2; exit 1; }

usage() {
	echo "$0 manager|vm2|vm3|vm4|etc..."
	echo "examples:"
	echo "$0 manager  : Initialize full manager configuration"
	echo "$0 vm2      : Initialize Internal EIN router configuration"
	exit 0
}

usage_manager () {
    echo "role manager IP/SUBNET DEFAULT-GATEWAY INTERNAL-DNS-LIST INTERNAL-DOMAIN-LIST private-ssh_ovpn_CA.tgz"
    echo "Example:"
    echo "role manager 10.0.12.1/24 10.0.12.2 \"10.0.12.2 10.0.23.2\" eine.bsdrp.net /root/DEMO.private.keys.tgz"
    exit 0
}

usage_gateway () {
    echo "Check that interfaces was correctly renamed:"
    echo " - net0: Internet facing interface"
    echo " - net1: Internal interface"
    echo "role gateway IP/SUBNET DEFAULT-GATEWAY"
    echo "Example:"
    echo "role gateway 10.0.12.1/24 10.0.12.2"
    exit 0
}


manager () {
    # $1: IP/SUBNET
    # $2: DEFAULT GATEWAY
    # $3: INTERNAL DNS SERVERS IP LIST
    # $4: INTERNAL DOMAIN NAMES LIST
    # $5: SSH private key and OpenVPN CA and private certificates
    [ $# -ne 5 ] && usage_manager
    IP=$1
    DFLT_GATEWAY=$2
    DNS_LIST=$3
    DOMAINS_LIST=$4
    PRIVATE_KEY=$5
    if [ ! -f ${PRIVATE_KEY} ]; then
        die "Missing archive containing private SSH keys and ovpn certificates"
    fi
    # Retrieve the SSH port to be used
    SSH_PORT=`grep '^Port[[:space:]]\+[[:digit:]]\+' /etc/ssh/sshd_config | cut -d ' ' -f 2`
    if [ ${SSH_PORT} -lt 1 -o ${SSH_PORT} -gt 65535 ]; then
        die "ERROR: Bad SSH port number: ${SSH_PORT}"
    fi

    echo "Port ${SSH_PORT}" > .ssh/config
    # Retrieve the Unregistered OpenVPN port to be used
    OVPN_PORT=`grep -m 1 '^remote[[:space:]]\+.*[[:space:]]\+[[:digit:]]\+' /usr/local/etc/openvpn/openvpn.conf | cut -d ' ' -f 3`
    if [ ${OVPN_PORT} -lt 1024 -o ${OVPN_PORT} -gt 65534 ]; then
        die "ERROR: Bad OpenVPN port number: ${OVPN_PORT}"
    fi

    # Retrieve the gateway domain name
    FULL_NAME=`grep -m 1 '^remote[[:space:]]\+.*[[:space:]]\+[[:digit:]]\+' /usr/local/etc/openvpn/openvpn.conf | cut -d ' ' -f 2`
    DOMAIN_NAME=${FULL_NAME#*.}
    
	echo "======= Generating manager configuration ======="
    echo "Value guessed:"
    echo "SSH Port: ${SSH_PORT}"
    echo "Domain name: ${DOMAIN_NAME}"
    echo "OpenVPN port: ${OVPN_PORT}"
	echo "Updating /etc/rc.conf Global configuration"
	sudo sysrc hostname="manager"
	sudo sysrc ifconfig_net0="inet ${IP}"
	sudo sysrc defaultrouter="${DFLT_GATEWAY}"
	sudo sysrc quagga_enable=NO
	sudo sysrc gateway_enable=NO
	sudo sysrc ipv6_gateway_enable=NO
	sudo sysrc openvpn_enable=NO
    sudo sysrc -x ipv6_cpe_wanif
	echo "Stoping/restarting services"
	sudo pkill -9 openvpn || echo "Can't kill openvpn"
	sudo service netif restart
	sudo service routing restart || echo "Restarting routing allways fail"
	sudo hostname manager

	echo "Generating Ansible directory layout..."
	sudo chmod g+w /usr/local/etc/ansible

    if [ ! -f /usr/local/etc/ansible/roles/gateway/files/usr/local/etc/openvpn/crl.pem ]; then
	    echo "Extracting certificate archive..."
	    sudo tar xzvf ${PRIVATE_KEY} -C /usr/local/etc/
	    echo "Installing certificates files to openvpn directory..."
	    for file in crl.pem ta.key ca.crt dh1024.pem; do
		    cp /usr/local/etc/keys/${file} /usr/local/etc/ansible/roles/gateway/files/usr/local/etc/openvpn
	    done
	    echo "Installing CA files..."
	    sudo sed -i "" -e '/EASY_RSA/s/`pwd`/\/usr\/local\/share\/easy-rsa\//' /usr/local/etc/easy-rsa.vars
        if [ ! -f ${HOME}/.ssh/id_ed25519 ]; then
            echo "Installing SSH private key"
            sudo mv /usr/local/etc/id_ed25519 ${HOME}/.ssh/id_ed25519
            sudo chown $USER ${HOME}/.ssh/id_ed25519
            chmod 600 ${HOME}/.ssh/id_ed25519
        else
            sudo rm /usr/local/etc/id_ed25519
        fi
    fi

	echo "port ${OVPN_PORT}" >> /usr/local/etc/ansible/roles/gateway/files/usr/local/etc/openvpn/gateway.conf.j2
	echo "port ${OVPN_PORT}" >> /usr/local/etc/ansible/roles/gateway/files/usr/local/etc/openvpn/registration.conf.j2


    # Generate the DNS/DOMAINS configuration for ovpn-gateway and local resolv
    [ -f /etc/resolv.conf ] && sudo rm -f /etc/resolv.conf
    FIRST=true
    for DOMAIN in ${DOMAINS_LIST}; do
        echo "push \"dhcp-option DOMAIN ${DOMAIN}\"" >> /usr/local/etc/ansible/roles/gateway/files/usr/local/etc/openvpn/gateway.conf.j2
        if (${FIRST}); then
           echo "domain ${DOMAIN}" | sudo tee -a /etc/resolv.conf
            FIRST=false  
        else
           echo "search ${DOMAIN}" | sudo tee -a /etc/resolv.conf
        fi
    done
    for DNS in ${DNS_LIST}; do
        echo "push \"dhcp-option DNS ${DNS}\"" >> /usr/local/etc/ansible/roles/gateway/files/usr/local/etc/openvpn/gateway.conf.j2
        echo "nameserver ${DNS}" | sudo tee -a /etc/resolv.conf
    done
    # Using the same manager resolv.conf to the gateway
    cp /etc/resolv.conf /usr/local/etc/ansible/roles/gateway/files/etc/

    chmod +x /usr/local/etc/ansible/roles/gateway/files/usr/local/etc/openvpn/ovpn-registration.sh
    
    FIRST=true
    for DOMAIN in ${DOMAINS_LIST}; do
        if (${FIRST}); then
            echo "domain=${DOMAIN}" >> /usr/local/etc/ansible/roles/vpn_wifi_router/files/usr/local/etc/dnsmasq.conf.j2
            FIRST=false
        else
            break
        fi
    done

    echo -n "dhcp-option=6" >> /usr/local/etc/ansible/roles/vpn_wifi_router/files/usr/local/etc/dnsmasq.conf.j2
    for DNS in ${DNS_LIST}; do
        echo -n ",${DNS}" >> /usr/local/etc/ansible/roles/vpn_wifi_router/files/usr/local/etc/dnsmasq.conf.j2
    done
    echo ",0.0.0.0" >> /usr/local/etc/ansible/roles/vpn_wifi_router/files/usr/local/etc/dnsmasq.conf.j2
	
 cat <<EOF > /usr/local/etc/ansible/roles/vpn_wifi_router/files/usr/local/etc/openvpn/openvpn.conf.j2
#{{ ansible_managed }}
client
dev tun0
proto udp
nobind
{% for host in groups['gateways'] %}
remote {{ hostvars[host]['hostname'] }}.${DOMAIN_NAME} ${OVPN_PORT}
{% endfor %}
ca ca.crt
cert {{hostname}}.crt
key {{hostname}}.key
cipher AES-128-CBC
remote-cert-tls server
tls-auth ta.key 1
persist-key
persist-tun
user nobody
group nobody
fast-io
explicit-exit-notify
log-append /var/log/openvpn.log
script-security 2
up /usr/local/etc/openvpn/ovpn-if.sh
plugin /usr/local/lib/openvpn/plugins/openvpn-plugin-down-root.so "/usr/local/etc/openvpn/ovpn-if.sh"
fragment 1400
mssfix
EOF

    # This file is critical for correctly set-up openvpn tunnel, need to update it easly
    cp /usr/local/etc/openvpn/ovpn-if.sh /usr/local/etc/ansible/roles/vpn_wifi_router/files/usr/local/etc/openvpn/

	echo "Done!"
	echo "Now you need to:"
	echo "1. Start the ssh-agent against the private key:"
	echo "ssh-agent tcsh"
	echo "ssh-add ~/.ssh/id_ed25519"
	echo "2. Bootstrap all VMs' configuration"
    echo "3. Add gateways:"
    echo "gateway create emea1 -i 10.0.23.3/24 -e 2.2.35.3/24 -l 10.254.254.3 -u 10.1.3.0/24 -r 10.0.3.0/24 -d 2.2.35.5"
    echo "gateway create amer1 -i 10.0.24.4/24 -e 2.2.45.4/24 -l 10.254.254.4 -u 10.1.4.0/24 -r 10.0.4.0/24 -d 2.2.45.5"
	echo "4. Displaying unregistered VPN-Wifi-router connected on ALL gateways:"
	echo "vpn-wifi-router list -u"
	echo "5. Register unregistered client"
    echo "vpn-wifi-router create singapore -i vtnet6 -x vtnet4 -e 10.6.1.254/24 -w 10.6.2.254/24 -l 3.3.3.6 -u 10.1.3.4"
    echo "vpn-wifi-router create sydney -i vtnet7 -x vtnet4 -e 10.7.1.254/24 -w 10.7.2.254/24 -l 3.3.3.7 -u 10.1.3.5"
}

vm2() {
	echo "EIN router"
	sudo sysrc hostname="router"
    sudo sysrc -xi ifconfig_vtnet0_name || true
    sudo ifconfig net0 name vtnet0
    sudo sysrc -xi ifconfig_vtnet1_name || true
    sudo ifconfig net1 name vtnet1
	sudo sysrc ifconfig_vtnet0="inet 10.0.12.2/24"
	sudo sysrc ifconfig_vtnet1="inet 10.0.23.2/24"
	sudo sysrc ifconfig_vtnet2="inet 10.0.24.2/24"
	sudo sysrc dnsmasq_enable=yes
	sudo sysrc openvpn_enable=NO
	sudo sysrc bird_enable=YES
    sudo sysrc firewall_enable=NO
    # Retrieve the domain name
    FULL_NAME=`grep -m 1 '^remote[[:space:]]\+.*[[:space:]]\+[[:digit:]]\+' /usr/local/etc/openvpn/openvpn.conf | cut -d ' ' -f 2`
    DOMAIN_NAME=${FULL_NAME#*.}
 
	cat <<EOF | sudo tee /usr/local/etc/dnsmasq.conf
address=/manager/manager.${DOMAIN_NAME}/10.0.12.1
interface=vtnet1
interface=vtnet2
interface=vtnet0
EOF

	cat <<EOF | sudo tee /usr/local/etc/bird.conf
# Configure logging
log syslog all;
log "/var/log/bird.log" all;
#log stderr all;

# Sync bird routing table with kernel
protocol kernel {
    export all;
}

# Include device route (warning, a device route is a /32)
protocol device {
    scan time 10;
}

# Enable Bidirectional Forwarding Detection (BFD)
#protocol bfd {}

protocol ospf ROUTER {
    export none;
    rfc1583compat yes;
    area 0.0.0.0 {
        interface "vtnet0","vtnet1", "vtnet2" {
            cost 10;
            type broadcast;
        };
   };
}
EOF

	sudo hostname router
	sudo pkill -9 openvpn
    sudo service ipfw onestop
	sudo service netif restart
	sudo service routing restart || echo "Routing restart allways failed"
	sudo service dnsmasq start
	sudo service bird start
	sudo config save
	echo "Done!"
}

gateway () {
    # $1: Internal IP/subnet
    # $2: Internal router (temporary default router)
    [ $# -ne 2 ] && usage_gateway
    IP=$1
    DFLT_GW=$2
	echo "Configuring Gateway ${IP} for bootstraping"
    sudo sysrc ifconfig_net1="inet ${IP}"
    sudo sysrc -x kld_list
    sudo sysrc -x rtadvd_enable
    sudo sysrc -x rtadvd_interfaces
    sudo sysrc -x ipv6_cpe_wanif
    sudo sysrc -x firewall_type
    sudo sysrc -x firewall_myservices
    sudo sysrc -x firewall_allowservices
    sudo sysrc -x openvpn_enable
    sudo sysrc firewall_script="/etc/ipfw.rules"
    cat <<EOF | sudo tee /etc/ipfw.rules
#!/bin/sh
fwcmd="/sbin/ipfw"
# Flush out the list before we begin.
\${fwcmd} -f flush
\${fwcmd} add pass all from any to any via lo0
\${fwcmd} add pass all from any to any via net1
EOF
	sudo service netif restart
    sudo service ipfw restart
    #We NEED to start bird (configured), because ansible will cut it's link
	#sudo service routing restart || echo "Routing restart allways failed"
	sudo pkill -9 openvpn || echo "Can't kill openvpn"
	cat <<EOF | sudo tee /usr/local/etc/bird.conf
# Configure logging
log syslog all;
log "/var/log/bird.log" all;
#log stderr all;

# Sync bird routing table with kernel
protocol kernel {
    export all;
}

# Include device route (warning, a device route is a /32)
protocol device {
    scan time 10;
}

protocol ospf ROUTER {
    export none;
    rfc1583compat yes;
    area 0.0.0.0 {
        interface "net1" {
            cost 10;
            type broadcast;
        };
   };
}

protocol static {
    route 0.0.0.0/0 via ${DFLT_GW};
}
EOF
    sudo sysrc bird_enable=yes
    sudo service bird start
	echo "Done!"
}

vm5 () {
	echo "Configuring Internet Router"
	sudo sysrc hostname="internet"
    sudo sysrc -x ifconfig_vtnet0_name
    sudo sysrc -x ifconfig_vtnet1_name
    sudo ifconfig net0 name vtnet0
    sudo ifconfig net1 name vtnet1
	sudo sysrc ifconfig_vtnet2="inet 2.2.35.5/24"
	sudo sysrc ifconfig_vtnet3="inet 2.2.45.5/24"
	sudo sysrc ifconfig_vtnet4="inet 202.56.56.5/24"
	sudo sysrc ifconfig_vtnet5="inet 203.57.57.5/24"
	sudo sysrc openvpn_enable=NO
	sudo sysrc dnsmasq_enable=YES
    sudo sysrc firewall_enable=NO
    sudo sysrc ntpd_enable=YES
	sudo hostname internet
	sudo service netif restart
    sudo service ipfw onestop
	sudo pkill -9 openvpn && echo "kill openvpn" || echo "failed to kill openvpn"
    # Retrieve the gateway domain name
    FULL_NAME=`grep -m 1 '^remote[[:space:]]\+.*[[:space:]]\+[[:digit:]]\+' /usr/local/etc/openvpn/openvpn.conf | cut -d ' ' -f 2`
    DOMAIN_NAME=${FULL_NAME#*.}
    cat <<EOF | sudo tee /etc/ntp.conf
restrict 202.0.0.0 mask 255.0.0.0
server 127.127.1.0
EOF
    sudo service ntpd restart
    cat <<EOF | sudo tee /usr/local/etc/dnsmasq.conf
address=/emea1.${DOMAIN_NAME}/2.2.35.3
address=/amer1.${DOMAIN_NAME}/2.2.45.4
address=/vm5-vm6.eine.bsdrp.net/202.56.56.5
address=/vm5-vm7.eine.bsdrp.net/202.57.57.5
address=/0.freebsd.pool.ntp.org/2.2.35.2
address=/rules.emergingthreats.net/2.2.35.5
domain=eine.bsdrp.net
interface=vtnet4
interface=vtnet5
dhcp-range=202.56.56.6,202.56.56.7,24h
dhcp-range=203.57.57.7,203.57.57.8,24h
EOF
	sudo service dnsmasq start
    sudo mkdir -p /usr/local/etc/www/open/suricata/
        cat <<EOF | sudo tee /usr/local/etc/www/websrv.py
import SimpleHTTPServer
import SocketServer
PORT = 80
Handler = SimpleHTTPServer.SimpleHTTPRequestHandler
httpd = SocketServer.TCPServer(("", PORT), Handler)
print "serving at port", PORT
httpd.serve_forever()
EOF
    sudo chown -R toutatis /usr/local/etc/www
    echo "uid=0(root) gid=0(root) groups=0(root)" > /usr/local/etc/www/index.html
    sudo python2 /usr/local/etc/www/websrv.py &
	echo "Done"
}

lab_vpn_router() {
	# $1: NIC used as "Internet" NIC
    # $2: NIC used as "Internal" NIC
	echo "Configuring LAB VPN-Router"
    # cleaning previous configuration
    for i in ${NIC_TYPE};do
        for j in 0 1; do
            sudo sysrc -x ifconfig_${i}${j}_name || true
        done
    done
    sudo ifconfig net0 name vtnet0
    sudo ifconfig net1 name vtnet1
    sudo ifconfig $1 name net0
    sudo ifconfig $2 name net1
    sudo sysrc ifconfig_$1_name="net0"
    sudo sysrc ifconfig_$2_name="net1"
    preserve_reset_config
    sudo service netif restart
	echo "Done"
}

desktop() {
	# $1: Nic used as LAN NIC
    # $2: VM name
	echo "Configuring laptop"
	sudo sysrc hostname="$2"
    sudo sysrc -x ifconfig_vtnet0_name
    sudo sysrc -x ifconfig_vtnet1_name
    sudo sysrc -x ifconfig_net0
	sudo sysrc ifconfig_$1="DHCP"
	sudo sysrc openvpn_enable=NO
	sudo sysrc gateway_enable=NO
	sudo sysrc ipv6_gateway_enable=NO
    sudo sysrc firewall_enable=NO
    sudo sysrc ntpd_enable=NO
	sudo pkill -9 openvpn || echo "can't kill openpvn"
	sudo hostname $2
	sudo service netif restart
	sudo service routing restart || echo "Routing restart allways failed"
    sudo service ipfw onestop
    sudo service ntpd onestop
    sudo sysctl net.inet.udp.blackhole=0
    sudo sysctl net.inet.tcp.blackhole=0
	sudo config save
	echo "Done"
}

preserve_reset_config () {
	# Allow 'config factory' to run without renaming
	sudo mount -uw /
	cp /etc/rc.conf /conf/base/etc/
	sudo mount -ur /
}

### Main

[ $# -lt 1 ] && usage
[ `id -u` -eq 0 ] && die "Don't start this script as root"

case "$1" in
	manager)
        shift
		manager "$@"
        ;;
    VM1|vm1)
        manager vtnet0 10.0.12.1/24 10.0.12.2 /root/DEMO.private.keys.tgz
		;;
    gateway)
        # remove the first argument
        shift
        gateway "$@"
        ;;
	VM2|vm2)
		vm2
		;;
	VM3|vm3)
        sudo ifconfig net0 name vtnet0
        sudo ifconfig vtnet3 name net0
        sudo sysrc -x ifconfig_vtnet0_name
        sudo sysrc ifconfig_vtnet3_name="net0"
        #preserve_reset_config
		gateway 10.0.23.3/24 10.0.23.2
		;;
	VM4|vm4)
        sudo ifconfig net0 name vtnet0
        sudo ifconfig vtnet3 name net0
        sudo sysrc -x ifconfig_vtnet0_name
        sudo sysrc ifconfig_vtnet3_name="net0"
        #preserve_reset_config
		gateway 10.0.24.4/24 10.0.24.2
		;;
	VM5|vm5)
		vm5
		;;
	VM6|vm6)
		lab_vpn_router vtnet4 vtnet6
		;;
    vm7|VM7)
        lab_vpn_router vtnet4 vtnet7
        ;;
	VM8|vm8)
		desktop vtnet5 vm8
		;;
	VM9|vm9)
		desktop vtnet6 vm9
		;;
	*)
		die "Bad call of lab_init with: $1"
esac
