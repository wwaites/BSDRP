#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-
"This script register new VPN-Wifi-router"
#
# Copyright (c) 2014-2016, Orange
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

import argparse       # parse user options
import sys            # Permit to call sys.exit
import os             # Permit to call os.geteuid

import netaddr        # Permit to convert IP address very easly
#import GeoIP          # Permit to parse GeoIP datafile
import geoip2.database # Permit to parse GeoIP2 database 
import eine           # EINE functions modules

# Variable definitions

PREFIX = "/usr/local"
ANSIBLE_DIR = PREFIX + "/etc/ansible"
EASYRSA_VARS = PREFIX + "/etc/easy-rsa.vars"
CLIENT_TPL_DIR = ANSIBLE_DIR + "/roles/vpn_wifi_router"
GW_TPL_DIR = ANSIBLE_DIR + "/roles/gateway"
ANSIBLE_HOSTVARS_DIR = ANSIBLE_DIR + "/host_vars"
ANSIBLE_INV = ANSIBLE_DIR + "/inventory.ini"
KNOWN_HOSTS = "/etc/dot.ssh." + os.environ['USER'] + "/known_hosts"

# Function definitions #


def create(args):
    "This create a new VPN-Wifi-router"

    print "Creating VPN-Wifi-router {}.".format(args.hostname.lower())
    sys.exit ("debug")
    # Split subnet (10.0.0.0/24) into a list of 2 elements
    # lan_inet4 = args.lan.split("/", 1)
    lan_inet4 = netaddr.IPNetwork(args.lan)

    print "Checking user input...",
    # Check if it's a valid IP address
    for address in ['lan', 'unregistered', 'loopback']:
        if getattr(args, address) is None:
            sys.exit('Missing value for {} option'.format(address))
        if not netaddr.IPNetwork(getattr(args, address)):
            sys.exit('Bad IP address: {} on option {}'
                     .format(getattr(args, address), address))
    # LAN subnet can't be > 30
    if lan_inet4.prefixlen > 30:
        sys.exit('too long or missing prefix length for LAN')
    print "Done"

    # Check for duplicate
    inv = eine.inventory_list('vpn_wifi_routers', ANSIBLE_INV, ANSIBLE_HOSTVARS_DIR)
    if inv and not eine.check_duplicate(inv, args):
        sys.exit('ERROR: Duplicate entry found')

    # Because we automatically add ssh key, we need an online client
    print 'Testing if online...',
    if eine.is_online(args.unregistered)[0]:
        print 'OK'
    else:
        sys.exit('Can\'t ping {}'.format(args.unregistered))

    # Update hosts file
    print 'Checking if not already existing in /etc/hosts...',
    if eine.is_in_hosts(args.hostname.lower()):
        sys.exit('Hostname {} is already in /etc/hosts'
                 .format(args.hostname.lower()))
    else:
        print 'No'

    print 'Updating /etc/hosts with volatile IP...',
    if eine.hosts_add(args.unregistered, args.hostname.lower()):
        print 'Done'
    else:
        sys.exit('ERROR')

    # Add the hostname to the Ansible inventory
    print "Adding VPN-wifi-router to Ansible inventory...",
    if eine.inventory_add(args.hostname.lower(), 'vpn_wifi_routers', ANSIBLE_INV):
        print "Done"
    else:
        sys.exit('ERROR')

    # Generate site certificate
    print "Generating site certificate...",
    if eine.cert_add(args.hostname.lower(), EASYRSA_VARS, CLIENT_TPL_DIR):
        print "Done"
    else:
        sys.exit('Can\'t generate certificate')

    # Generate the host variable file
    print "Generating Ansible host variable file...",
    with open(ANSIBLE_HOSTVARS_DIR + '/' + args.hostname.lower(), 'w') as var:
        var.write("---\n")
        var.write("hostname: " + args.hostname.lower() + "\n")
        if args.ifext:
            var.write("if_internet_device: " + args.ifext + "\n")
        if args.ifint:
            var.write("if_lan_device: " + args.ifint + "\n")
        var.write("if_lan_inet4_addr: {}\n".format(lan_inet4[len(lan_inet4)-2]))
        var.write("if_lan_inet4_net: {}\n".format(lan_inet4.network))
        var.write("if_lan_inet4_prefix: {}\n".format(lan_inet4.prefixlen))
        var.write("if_lan_inet4_dhcp_start: {}\n".format(lan_inet4[1]))
        var.write("if_lan_inet4_dhcp_end: {}\n".format(lan_inet4[len(lan_inet4)-3]))
        var.write("if_wifi_device: ath0\n")
        var.write("if_lo_inet4_addr: " + args.loopback + "\n")
        var.write("if_lo_inet4_prefix: 32\n")
    print "Done"

    # Generate the ccd file
    print "Generating OpenVPN CCD file...",
    with open(GW_TPL_DIR + '/files/usr/local/etc/openvpn/ccd/'
              + args.hostname.lower(), 'w') as ccd:
        ccd.write('iroute ' + args.loopback + ' 255.255.255.255\n')
        ccd.write('iroute {} {}\n'.format(lan_inet4.network,
                                          lan_inet4.netmask))
    print "Done"

    # Before using ansible we need to add the client SSH key
    print "Downloading VPN-Wifi-router' SSH keys...",
    if eine.sshkey_add(args.hostname.lower(), KNOWN_HOSTS):
        print 'Done'
    else:
        sys.exit('Failed')

    # Now we push the ccd files to gateways
    print "Uploading OpenVPN CCD file to all gateways...",
    status, out = eine.ansible_playbook(ANSIBLE_INV, ANSIBLE_DIR
                                        + '/gateways.yml', None,
                                        'ccd,saving')
    if status:
        print 'Done'
    else:
        sys.exit("ERROR: Ansible didn't reach to push config to gateways\n"
                 .format(out))

    # Now we can push the registered client template
    print "Uploading registered configuration to VPN-Wifi-router...",
    status, out = eine.ansible_playbook(ANSIBLE_INV, ANSIBLE_DIR
                                        + '/vpn_wifi_routers.yml', args.hostname.lower())
    if status:
        print 'Done'
    else:
        sys.exit("Error! Ansible didn't reach to push template to VPN-Wifi-router\n"
                 .format(out))

    # Once done, the client need to be rebooted
    print "Asking VPN-Wifi-router to reboot in 5 seconds...",
    status, out = eine.ansible('sudo shutdown -r +5s', ANSIBLE_INV,
                               'vpn_wifi_routers', args.hostname.lower())
    if status:
        print 'Done'
    else:
        sys.exit("ERROR: Ansible didn't reach to send reboot command\n"
                 .format(out))

    # Then hosts can use the loopback address for reaching the client
    print "Deleting unregistered VPN-Wifi-router s IP entry from /etc/hosts...",
    if eine.hosts_del(args.hostname.lower()):
        print "Done"
    else:
        sys.exit('Failed')
    print "Adding registered IP router entry into /etc/hosts...",
    if eine.hosts_add(args.loopback, args.hostname.lower()):
        print "Done"
    else:
        sys.exit('Failed')
    print "Client correctly registered, don't forget to save configuration"
    return True


def delete(args):
    "This delete a VPN-Wifi-router"
    print "Deleting VPN-Wifi-router {}.".format(args.hostname.lower())

    print "Checking old entry in /etc/hosts...",
    if eine.is_in_hosts(args.hostname.lower()):
        print "Yes"
        print "  Checking if it's online...",
        if eine.is_online(args.hostname.lower())[0]:
            print "yes"
            print "    factory-reset the VPN-Wifi-router...",
            if eine.ansible('sudo config factory', ANSIBLE_INV, 'vpn_wifi_routers',
                            args.hostname.lower())[0]:
                print 'Done'
                print "    Asking VPN-Wifi-router to reboot in 5 seconds...",
            else:
                print 'Failed'
            if eine.ansible('sudo shutdown -r +5s', ANSIBLE_INV, 'vpn_wifi_routers',
                            args.hostname.lower())[0]:
                print 'Done'
            else:
                print 'Failed'
        else:
            print "no"
        print "  Deleting old entry...",
        if eine.hosts_del(args.hostname.lower()):
            print "Done"
        else:
            print "Failed"
    else:
        print "Missing"

    # Remove hostname from Ansible inventory
    print "Deleting entry in Ansible inventory...",
    if eine.inventory_del(args.hostname.lower(), 'vpn_wifi_routers', ANSIBLE_INV):
        print 'Done'
    else:
        sys.exit('ERROR')

    # Revoke and delete site certificate
    print "Revoking and deleting certificate...",
    if eine.cert_del(args.hostname.lower(), EASYRSA_VARS, CLIENT_TPL_DIR,
                     GW_TPL_DIR):
        print "Done"
        print "  Uploading new CRL to all gateways...",
        # Revoking site certificate had updated the CRL
        # Need to push the new version to all gateways
        status = eine.ansible_playbook(ANSIBLE_INV, ANSIBLE_DIR
                                       + '/gateways.yml', None,
                                       'crl,saving')[0]
        if not status:
            sys.exit('Failed')
        else:
            print "Done"
    else:
        print "Skiping"

    # Remove Ansible host variable file
    print "Checking if existing host variable file...",
    if os.path.isfile(ANSIBLE_HOSTVARS_DIR + '/' + args.hostname.lower()):
        print "Found"
        print "  Cleaning Ansible host variable file...",
        try:
            os.remove(ANSIBLE_HOSTVARS_DIR + '/' + args.hostname.lower())
            print "Done"
        except OSError:
            print "Failed"
    else:
        print "Missing"

    # Remove Gateways' CCD file
    print "Checking if existing CCD file...",
    ccdfile = GW_TPL_DIR + '/files/usr/local/etc/openvpn/ccd/' + \
              args.hostname.lower()
    if os.path.isfile(ccdfile):
        print "Found"
        print "  Removing CCD file...",
        try:
            os.remove(ccdfile)
            print "Done"
            print "    Cleaning CCD file on all gateways...",
            if eine.ansible('rm /usr/local/etc/openvpn/ccd/'
                            + args.hostname.lower(), ANSIBLE_INV, 'gateways')[0]:
                print "OK"
            else:
                print "NOK"
        except OSError:
            print "Failed"
    else:
        print "Missing"

    # Remove SSH host key
    print "Checking VPN-Wifi-router SSH key in know_hosts file...",
    if eine.is_in_sshkey(args.hostname.lower(), KNOWN_HOSTS):
        print "Found"
        print "  Delete VPN-Wifi-router SSH key...",
        if eine.sshkey_del(args.hostname.lower(), KNOWN_HOSTS):
            print "OK"
        else:
            print "NOK"
    else:
        print "Missing"
    print "Client deleted, don't forget to save manager configuration"
    return True

def reinstall(args):
    "This reinstall a router configuration (delete by a factory reset)"
    print "Checking existing hostname entry in /etc/hosts...",
    if eine.is_in_hosts(args.hostname.lower()):
        print "Yes"
    else:
        sys.exit('hostname given not found in /etc/hosts')

    # Need to update hosts with tempo IP, but saving OLD IP
    print "Backing hosts file..."
    if eine.backup_hosts():
        print "Done"
    else:
        print "Failed"
    print "Deleting old hosts entry..."
    if eine.hosts_del(args.hostname.lower()):
        print "Done"
    else:
        print "Failed"
    print "Adding new entry..."
    if eine.hosts_add(args.unregistered, args.hostname.lower()):
        print 'Done'
    else:
        sys.exit('ERROR')
 
    # Remove old SSH host key
    print "Checking SSH key in know_hosts file...",
    if eine.is_in_sshkey(args.hostname.lower(), KNOWN_HOSTS):
        print "Found"
        print "  Delete VPN-Wifi-router SSH key...",
        if eine.sshkey_del(args.hostname.lower(), KNOWN_HOSTS):
            print "OK"
        else:
            print "NOK"
    else:
        print "Missing"

    # Add the new SS key
    print "Downloading VPN-Wifi-router' SSH keys...",
    if eine.sshkey_add(args.hostname.lower(), KNOWN_HOSTS):
        print 'Done'
    else:
        sys.exit('Failed')
 
    # Now we can repush the client configuration file
    print "Uploading configuration to VPN-Wifi-router...",
    status, out = eine.ansible_playbook(ANSIBLE_INV, ANSIBLE_DIR
                                        + '/vpn_wifi_routers.yml', args.hostname.lower())
    if status:
        print 'Done'
    else:
        sys.exit("Error! Ansible didn't reach to push template to VPN-Wifi-router\n"
                 .format(out))

    # Once done, the client need to be rebooted
    print "Asking VPN-Wifi-router to reboot in 5 seconds...",
    status, out = eine.ansible('sudo shutdown -r +5s', ANSIBLE_INV,
                               'vpn_wifi_routers', args.hostname.lower())
    if status:
        print 'Done'
    else:
        sys.exit("ERROR: Ansible didn't reach to send reboot command\n"
                 .format(out))

    # Need to restore hosts with previous (loopback) IP
    print 'Restoring previos hosts file...'
    if eine.restore_hosts():
        print "Done"
    else:
        print "Failed"
    print "Client correctly reinstalled, don't forget to save manager configuration (SSH key updated)"
    return True

def renew(args):
    "This renew router's certificate"
    print 'Renew certificate of site: {}'.format(args.hostname.lower())


def listing(args):
    "This list unregistered or registered VPN-Wifi-router"
    if not (args.unregistered or args.registered or args.inventory):
        sys.exit('No action requested, add -u, -r or -i')
    if args.inventory:
        inv = eine.inventory_list('vpn_wifi_routers', ANSIBLE_INV,
                                  ANSIBLE_HOSTVARS_DIR)
        if inv:
            inv.insert(0, ['Hostname', 'loopack', 'LAN subnet'])
            eine.pprint_table(sys.stdout, inv)
            return True
        else:
            return False
    elif args.unregistered:
        status, out = eine.ansible('cat /var/log/openvpn-registration.log',
                                   ANSIBLE_INV, 'gateways')
    elif args.registered:
        status, out = eine.ansible('cat /var/log/openvpn-gateway.log',
                                   ANSIBLE_INV, 'gateways')

    if status:
        # CLIENT_LIST,Common Name,Real Address,Virtual Address,
        # Bytes Received,Bytes Sent,Connected Since,
        # Connected Since (time_t),Username
        #geo = GeoIP.open("/usr/local/share/GeoIP/GeoLiteCity.dat",
        #                 GeoIP.GEOIP_STANDARD)
        geo = geoip2.database.Reader("/usr/local/share/GeoIP/GeoLite2-City.mmdb")

        clients = []
        for line in out.splitlines():
            if 'rc=0' in line:
                # ema1 | success | rc=0 >>
                gateway = line.split('|')[0]
                gateway = gateway.strip()
            if line.startswith('CLIENT_LIST'):
                splited = line.split(',')
                # Real Address in form 203.57.57.8:14201 (need to remove port)
                pubip = splited[2].split(':')[0]
                # Legacy GeoIP use country_name_by_addr(pubip)
                # Legacy GeoIPCity use:
                #   record_by_name(pubip).city
                #   record_by_name(pubip).country_name
                # GeoIP2 use:
                #   city(pubip).country.name
                #   city(pubip).city.name 
                geo_result = geo.city(pubip)
                if geo_result.city.name is not None:
                    geo_str = str(geo_result.country.name) + \
                      '(' + geo_result.city.name.encode('utf-8') + ')'
                else:
                    geo_str = str(geo_result.country.name)
                to_be_added = [splited[1], pubip, geo_str, splited[3],
                               splited[4], splited[5], splited[6],
                               splited[7], gateway]
                clients.append(to_be_added)
                # I would like to use a more inteliggent way
                # but it's didn't work:
                #clients.append([splited[1:7], gateway])
        title = ['Common Name', 'Real Address', 'GeoIP', 'Virtual Address',
                 'Bytes Received', 'Bytes Sent', 'Connected Since',
                 'Connected Since (time_t)', 'Gateway']
        clients.insert(0, title)
        eine.pprint_table(sys.stdout, clients)
        return True
    else:
        print 'ERROR'
        print out
        return False

# Main function

# pylint: disable=C0103
if __name__ == '__main__':
    # Create the top-level command-line option parser
    parser = argparse.ArgumentParser(description='Manage VPN-Wifi-routers',
                                     epilog="Example: vpn-wifi-router create boyo \
                                             -e 10.0.0.0/24 \
                                             -l 1.1.1.1 -u 8.8.8.8 \
                                             [-i internal-nic-name] \
                                             [-x external-nic-name]")
    subparsers = parser.add_subparsers()
    parser_create = subparsers.add_parser('create')
    parser_create.add_argument("hostname", help='hostname')
    parser_create.add_argument('-b', '--bandwitdh', nargs='?',
                               help='Maximum upload bandwith (in kb/s)')
    parser_create.add_argument('-e', '--lan', nargs='?', required=True,
                               help='IPv4 LAN subnet/cidr-mask')
    parser_create.add_argument('-x', '--ifext', nargs='?',
                               help='if name connected to external (Internet)')
    parser_create.add_argument('-i', '--ifint', nargs='?',
                               help='if name connected to local LAN')
    parser_create.add_argument('-l', '--loopback', nargs='?', required=True,
                               help='IPv4 loopback address (definitive)')
    parser_create.add_argument('-u', '--unregistered', nargs='?',
                               required=True,
                               help='IPv4 unregistered address (temporary)')
    parser_create.set_defaults(func=create)
    # 'delete' options
    parser_delete = subparsers.add_parser('delete')
    parser_delete.add_argument("hostname", help='hostname')
    parser_delete.set_defaults(func=delete)
    # 'reinstall' option
    parser_reinstall = subparsers.add_parser('reinstall')
    parser_reinstall.add_argument("hostname", help='hostname')
    parser_reinstall.add_argument('-u', '--unregistered', nargs='?',
                              required=True,
                              help='IPv4 unregistered address (temporary)')
    parser_reinstall.set_defaults(func=reinstall)
    # 'renew' options
    parser_renew = subparsers.add_parser('renew')
    parser_renew.add_argument("hostname", help='hostname')
    parser_renew.set_defaults(func=renew)
    # 'list' options
    parser_list = subparsers.add_parser('list')
    parser_list.add_argument('-i', '--inventory', action='store_true',
                             help='Display VPN-Wifi-routers in inventory')
    parser_list.add_argument('-u', '--unregistered', action='store_true',
                             help='Display unregistered VPN-Wifi-routers')
    parser_list.add_argument('-r', '--registered', action='store_true',
                             help='Display registered client')
    parser_list.set_defaults(func=listing)
    # Parsing argument
    arguments = parser.parse_args()
    # Calling functions (almost same name as the first argument)
    if eine.is_root():
        sys.exit('Do not start this script with root privilege')
    arguments.func(arguments)
# pylint: enable=C0103
