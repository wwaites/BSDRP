# BSD Media Center NanoBSD configuration file
#
# NanoBSD port support added from Gitoyen:
# http://www.gitoyen.net/Howto-NanoBSD-quagga-router 
# Some cleanup idea taken from imp@ nanoBSD script
#
################## Common section #################

# Console port speed
COM_SPEED=38400

# Where cust_pkg() finds packages to install
NANO_PACKAGE_DIR=${NANO_TOOLS}/Pkg
NANO_PACKAGE_LIST="*"

# Need to set early the NANO_ARCH variable for being use in the add_port function
# TARGET_ARCH was set by the make script
NANO_ARCH=${TARGET_ARCH}

# Options to put in make.conf during buildworld only
# BOOT_COMCONSOLE_SPEED is useless because we using /boot.config with -Sspeed option
CONF_BUILD='
MALLOC_PRODUCTION=
'

# Options to put in make.conf during installworld only
# Do not use: WITHOUT_TOOLCHAIN=, because installing port need it
# Do not use: WITHOUT_INSTALLLIB=, because perl can't compile
# We would compile symbol files, but not install them by default
CONF_INSTALL=''

# Options to put in make.conf during both build- & installworld.
# See the file /usr/src/tools/build/options or man src.conf for details
# WITHOUT_FORTH= mandatory for the boot-loader
# WITHOUT_GROFF= Ports needs for build man page
# WITHOUT_KVM= and WITHOUT_KVM_SUPPORT= prevent buildworld to complet (don't know why)

CONF_WORLD='
WITHOUT_ACCT=
WITHOUT_AMD=
WITHOUT_APM=
WITHOUT_ASSERT_DEBUG=
WITHOUT_ATF=
WITHOUT_ATM=
WITHOUT_AUDIT=
WITHOUT_AUTHPF=
WITHOUT_BLUETOOTH=
WITHOUT_BSDINSTALL=
WITHOUT_BSNMP=
WITHOUT_CALENDAR=
WITHOUT_CTM=
WITHOUT_CVS=
WITHOUT_DICT=
WITHOUT_EXAMPLES=
WITHOUT_FLOPPY=
WITHOUT_FREEBSD_UPDATE=
WITHOUT_GAMES=
WITHOUT_GCOV=
WITHOUT_GDB=
WITHOUT_GNUCXX=
WITHOUT_GPIB=
WITHOUT_GPIO=
WITHOUT_HTML=
WITHOUT_INFO=
WITHOUT_IPFILTER=
WITHOUT_IPFW=
WITHOUT_IPX=
WITHOUT_IPX_SUPPORT=
WITHOUT_JAIL=
WITHOUT_KERBEROS=
WITHOUT_KERBEROS_SUPPORT=
WITHOUT_LIB32=
WITHOUT_LOCALES=
WITHOUT_LOCATE=
WITHOUT_LPR=
WITHOUT_MAN=
WITHOUT_MAN_UTILS=
WITHOUT_NCP=
WITHOUT_NDIS=
WITHOUT_NETCAT=
WITHOUT_NETGRAPH=
WITHOUT_NETGRAPH_SUPPORT=
WITHOUT_NIS=
WITHOUT_NLS=
WITHOUT_NLS_CATALOGS=
WITHOUT_NS_CACHING=
WITHOUT_PC_SYSINSTALL=
WITHOUT_PAM=
WITHOUT_PAM_SUPPORT=
WITHOUT_PPP= 
WITHOUT_PORTSNAP=
WITHOUT_PROFILE=
WITHOUT_QUOTAS=
WITHOUT_RCMDS=
WITHOUT_RCS=
WITHOUT_RESCUE=
WITHOUT_ROUTED=
WITHOUT_SENDMAIL=
WITHOUT_SHAREDOCS=
WITHOUT_SVNLITE=
WITHOUT_SYSCONS=
WITHOUT_SYSINSTALL=
WITHOUT_TESTS=
WITHOUT_TESTS_SUPPORT=
WITHOUT_UNBOUND=
WITHOUT_USB_GADGET_EXAMPLES=
WITHOUT_ZFS=
'

# Customize commands.
NANO_CUSTOMIZE=""

# Late customize commands.
NANO_LATE_CUSTOMIZE=""

# Newfs paramters to use
NANO_NEWFS="-b 4096 -f 512 -i 8192 -O1 -m 0"

# Number of code images on media (1 or 2)
NANO_IMAGES=2

# 0 -> Leave second image all zeroes so it compresses better.
# 1 -> Initialize second image with a copy of the first
NANO_INIT_IMG2=0

# Size of code file system in 512 bytes sectors
# If zero, size will be as large as possible.
NANO_CODESIZE=0

### HOW TO Calculate partition size ###
# If you want a 5MB partition, do:
# 5 * 1024 * 1024 / 512 = 10240

# Size of configuration file system in 512 bytes sectors
# Cannot be zero.
# 10MB = 2048
NANO_CONFSIZE=40960

# Size of data file system in 512 bytes sectors
# If zero: no partition configured.
# If negative: max size possible
# This filesystem is used for archive configuration and
# for user customized scripts or tool
NANO_DATASIZE=40960

# Size of the /etc ramdisk in 512 bytes sectors
# 10240=5MB
NANO_RAM_ETCSIZE=40960

# Size of the /tmp+/var ramdisk in 512 bytes sectors
# 40960=20Mb (usefull for log files)
NANO_RAM_TMPVARSIZE=40960

# Boot0cfg configuration mode
NANO_BOOT0CFG="-o packet -s 1 -m 3 -t 18"

# Backing type of md(4) device
# Can be "file" or "swap"
NANO_MD_BACKING="file"

# Label name
# Alphacharacter only
NANO_LABEL=${NANO_NAME}

# Progress Print level
PPLEVEL=3

# Need to check if this function works with cross-compiling architecture!!!!
# Recursive complex fonction: Generate one function for each ports
add_port () {
	port=`echo $1 | sed -e 's/\//_/'`
	# Check if package allready exist
	cd ${PORTS_SRC}/$1
	# Warning: a package name can change regarding the build option
	if [ $# -gt 1 ]; then
		PKG_NAME=`env PORTSDIR=${PORTS_SRC} make package-name "$2"`
	else
		PKG_NAME=`env PORTSDIR=${PORTS_SRC} make package-name`
	fi
	if [ -f ${NANO_OBJ}/ports/packages/All/${PKG_NAME}.txz ]; then
	# Pkg file found: Generate add_pkg_NAME function
		#Don't try to install pkg, the boot strap will install it
		if [ "$1" != "ports-mgmt/pkg" ]; then
			eval "
			add_pkg_${port} () {
				#Need to create ${NANO_OBJ}/ports in this add_pkg_${port} function
				if [ ! -d \${NANO_OBJ}/ports ]; then
					mkdir -p \${NANO_OBJ}/ports/packages
				fi
				mkdir -p \${NANO_WORLDDIR}/usr/ports/packages
				mount -t nullfs \${NANO_OBJ}/ports/packages \
					\${NANO_WORLDDIR}/usr/ports/packages
				# Run ldconfig before
				CR '/sbin/ldconfig -m /lib /usr/lib /usr/lib/compat'
				# Start the pkg add
				# Create the repo configuration file
				mkdir -p \${NANO_WORLDDIR}/usr/local/etc/pkg/repos
				cat <<EOF > \${NANO_WORLDDIR}/usr/local/etc/pkg/repos/myrepo.conf
myrepo: {
 url: "file:///usr/ports/packages",
 enabled: true,
 signature_type: 'none',
 assume_always_yes: true
}
FreeBSD: {
    enabled: false
}
EOF
			# Bug with pkg: not using the "-d" option prevent to install the package with error message "pkg fail to extract static"
			# Need to force assume_always_yes for avoiding bootstrap pkg confirmation too
				CR 'env ASSUME_ALWAYS_YES=true pkg -d add /usr/ports/packages/All/${PKG_NAME}.txz'
				umount \${NANO_WORLDDIR}/usr/ports/packages
				rmdir \${NANO_WORLDDIR}/usr/ports/packages
				rmdir \${NANO_WORLDDIR}/usr/ports
			}
       		customize_cmd add_pkg_${port}
       		"
		fi
	else
	# No pkg file: Generate add_port_NAME function
       	eval "
       	add_port_${port} () {
		#Need to create ${NANO_OBJ}/ports in this add_port_${port} function
		[ -d \${NANO_OBJ}/ports ] ||
		  mkdir -p \${NANO_OBJ}/ports/packages
       		mount -t nullfs \${NANO_SRC} \${NANO_WORLDDIR}/usr/src
		mkdir -p \${NANO_WORLDDIR}/usr/ports
       		mount -t nullfs \${PORTS_SRC} \${NANO_WORLDDIR}/usr/ports
		mkdir -p \${NANO_WORLDDIR}/usr/ports/packages
		mount -t nullfs \${NANO_OBJ}/ports/packages \
		  \${NANO_WORLDDIR}/usr/ports/packages
       		mkdir -p \${NANO_WORLDDIR}/dev
       		mount -t devfs devfs \${NANO_WORLDDIR}/dev
       		mkdir -p \${NANO_WORLDDIR}/usr/pobj
       		mkdir -p \${NANO_WORLDDIR}/usr/workdir
       		cp /etc/resolv.conf \${NANO_WORLDDIR}/etc/resolv.conf
		# If a port have NO_PACKAGE, comment-it
              	if grep -q NO_PACKAGE \${NANO_WORLDDIR}/usr/ports/$1/Makefile; then
               		mv \${NANO_WORLDDIR}/usr/ports/$1/Makefile \${NANO_WORLDDIR}/usr/ports/$1/Makefile.nanobsd
               		sed 's/NO_PACKAGE/\#NO_PACKAGE/g' \${NANO_WORLDDIR}/usr/ports/$1/Makefile.nanobsd > \${NANO_WORLDDIR}/usr/ports/$1/Makefile
               	fi
		# Run ldconfig before
		CR '/sbin/ldconfig -m /lib /usr/lib /usr/lib/compat'
		# Start the build
		# With staging (mandatory for creating user packag during "install"),
		# there is a bug if we use one command "make install package":
		# It failed during do-package call. We had to do a "make install" && "make package"
		# But this method failed if the port didn't support staging :-(
		# Now I have to found a solution for avoiding this two same long command
			if grep -q NO_STAGE \${NANO_WORLDDIR}/usr/ports/$1/Makefile; then
   					CR 'env TARGET=${NANO_ARCH} TARGET_ARCH=${NANO_ARCH} \
		  MACHINE=${NANO_ARCH} MACHINE_ARCH=${NANO_ARCH} OSVERSION=${FBSD_DST_OSVERSION} \
		  UNAME_r=${FBSD_DST_RELEASE} UNAME_v=${FBSD_DST_RELEASE} \
		  UNAME_p=${NANO_ARCH} UNAME_m=${NANO_ARCH} \
		  make WRKDIRPREFIX=/usr/workdir FETCH_ARGS=-pRr -C /usr/ports/$1 \
                  install package BATCH=yes -DWITH_PKGNG \
		  WITHOUT=\"NLS DOCS EXAMPLES\" -DWITH_SSP_PORTS $2 clean'
			else
       			CR 'env TARGET=${NANO_ARCH} TARGET_ARCH=${NANO_ARCH} \
		  MACHINE=${NANO_ARCH} MACHINE_ARCH=${NANO_ARCH} OSVERSION=${FBSD_DST_OSVERSION} \
		  UNAME_r=${FBSD_DST_RELEASE} UNAME_v=${FBSD_DST_RELEASE} \
		  UNAME_p=${NANO_ARCH} UNAME_m=${NANO_ARCH} \
		  make WRKDIRPREFIX=/usr/workdir FETCH_ARGS=-pRr -C /usr/ports/$1 \
                  install BATCH=yes -DWITH_PKGNG \
		  WITHOUT=\"NLS DOCS EXAMPLES\" -DWITH_SSP_PORTS $2 clean'
          		CR 'env TARGET=${NANO_ARCH} TARGET_ARCH=${NANO_ARCH} \
		  MACHINE=${NANO_ARCH} MACHINE_ARCH=${NANO_ARCH} OSVERSION=${FBSD_DST_OSVERSION} \
		  UNAME_r=${FBSD_DST_RELEASE} UNAME_v=${FBSD_DST_RELEASE} \
		  UNAME_p=${NANO_ARCH} UNAME_m=${NANO_ARCH} \
		  make WRKDIRPREFIX=/usr/workdir FETCH_ARGS=-pRr -C /usr/ports/$1 \
                  package BATCH=yes -DWITH_PKGNG \
		  WITHOUT=\"NLS DOCS EXAMPLES\" -DWITH_SSP_PORTS $2 clean'
			fi
		rm \${NANO_WORLDDIR}/etc/resolv.conf
               	rm -rf \${NANO_WORLDDIR}/usr/obj
               	rm -rf \${NANO_WORLDDIR}/usr/pobj
               	rm -rf \${NANO_WORLDDIR}/usr/workdir
               	umount \${NANO_WORLDDIR}/dev
		umount \${NANO_WORLDDIR}/usr/ports/packages
		rmdir \${NANO_WORLDDIR}/usr/ports/packages
               	umount \${NANO_WORLDDIR}/usr/ports
               	rmdir \${NANO_WORLDDIR}/usr/ports
               	umount \${NANO_WORLDDIR}/usr/src
        }
        customize_cmd add_port_${port}
       	"
	fi
}

#### Ports list section #####

add_port "ports-mgmt/pkg"

# Add other filesystem support (for playing local media files)
#add_port "sysutils/fusefs-ntfs"
#add_port "sysutils/fusefs-exfat"
#add_port "sysutils/fusefs-ext4fuse"
#add_port "sysutils/automount"

# Python
    add_port "print/indexinfo"
   add_port "devel/readline"
   add_port "devel/libffi"
  add_port "lang/python27"
 add_port "lang/python2"
add_port "lang/python"
add_port "devel/py-setuptools27"

# Perl
add_port "lang/perl5.20"

# Add xorg-minimal (and all its package-depends-list)
  add_port "devel/libpthread-stubs"
   add_port "misc/pciids"
  add_port "devel/libpciaccess"
 add_port "graphics/libdrm"
  add_port "devel/libedit"
 add_port "devel/llvm36"
   add_port "x11/kbproto"
    add_port "x11/xproto"
   add_port "x11/libXau"
   add_port "x11/libXdmcp"
    add_port "textproc/libxml2"
   add_port "x11/libxcb"
   add_port "x11/xextproto"
   add_port "x11/inputproto"
  add_port "x11/libX11"
  add_port "x11/libXext"
   add_port "x11/videoproto"
  add_port "x11/libXv"
 add_port "x11/libXvMC"
   add_port "x11/xf86vidmodeproto"
  add_port "x11/libXxf86vm"
   add_port "textproc/expat2"
     add_port "x11/dri2proto"
     add_port "x11/fixesproto"
    add_port "x11/libXfixes"
    add_port "x11/damageproto"
   add_port "x11/libXdamage"
   add_port "devel/libdevq"
   add_port "x11/libxshmfence"
   add_port "devel/gettext-runtime"
   add_port "x11/glproto"
  add_port "graphics/libglapi"
add_port "graphics/dri"
add_port "graphics/libGL"
 add_port "x11/libICE"
add_port "x11/libSM"
 add_port "x11-fonts/fontsproto"
 add_port "print/freetype2"
 add_port "x11-fonts/libfontenc"
add_port "x11-fonts/libXfont"
 add_port "x11/libxkbfile"
add_port "x11/xkbcomp"
add_port "x11/xkeyboard-config"
add_port "x11-fonts/font-util"
 add_port "x11/xineramaproto"
add_port "x11/libXinerama"
 add_port "x11-toolkits/libXt"
 add_port "x11-toolkits/libXmu"
   add_port "x11/printproto"
  add_port "x11/libXp"
  add_port "x11/libXpm"
 add_port "x11-toolkits/libXaw"
  add_port "x11/xf86miscproto"
 add_port "x11/libXxf86misc"
 add_port "x11/libxkbui"
 add_port "x11/pixman"
 add_port "x11/renderproto"
 add_port "x11/randrproto"
 add_port "x11/compositeproto"
   add_port "graphics/libglesv2"
    add_port "graphics/gbm"
   add_port "graphics/libEGL"
 add_port "graphics/libepoxy"
add_port "x11-servers/xorg-server"

# xorg-minimal
 add_port "x11/libXi"
add_port "x11-drivers/xf86-input-mouse"
add_port "x11-drivers/xf86-input-keyboard"
add_port "x11/xinit"
add_port "x11/xauth"
add_port "x11-drivers/xf86-video-vesa"
add_port "x11/xorg-minimal"

# xorg-drivers
 add_port "x11/libXrender"
 add_port "x11-drivers/xf86-video-openchrome"
  add_port "x11/xcb-util"
 add_port "x11-drivers/xf86-video-intel"
 add_port "x11-drivers/xf86-video-ati"
 add_port "x11-drivers/xf86-video-r128"
 add_port "x11-drivers/xf86-video-nv"
 add_port "x11-drivers/xf86-video-mach64"
add_port "x11-drivers/xorg-drivers"

# nvidia (VDPAU)
#add_port "x11/nvidia-driver" "WITHOUT=\"LINUX\""
add_port "x11/nvidia-driver-340" "WITHOUT=\"LINUX\""

# xrandr
 add_port "x11/libXrandr"
add_port "x11/xrandr"

#slim, for autologon
 add_port "archivers/lzo2"
 add_port "graphics/jpeg"
 # curl needed for build only for png but for run after
  add_port "security/ca_root_nss"
  add_port "ftp/curl" "WITH=\"GSSAPI_NONE\" WITHOUT=\"GSSAPI_BASE\""
 add_port "graphics/png"
  add_port "sysutils/gnome_subr"
 add_port "devel/dbus"
 add_port "x11-fonts/fontconfig"
 add_port "x11-fonts/libXft"
add_port "x11/slim" "WITHOUT=\"PAM CONSOLEKIT\""
add_port "x11-themes/slim-themes"

#lirc for remotecontrol
 add_port "comms/libirman"
#  add_port "devel/boost-libs"
 add_port "devel/libftdi" "WITHOUT=\"BOOST PYTHON\""
add_port "comms/lirc" "WITH=\"MINIMAL\""

#ffmpeg
#add_port "multimedia/ffmpeg" "-DWITH_VAAPI -DWITH_VDPAU -DWITH_FAAC"

#kodi
   add_port "converters/libiconv"
   add_port "devel/pcre"
  add_port "devel/glib20"
  add_port "x11/xcb-util-renderutil"
 add_port "graphics/cairo"
  add_port "misc/hicolor-icon-theme"
  add_port "misc/shared-mime-info"
  add_port "x11/libXcomposite"
   add_port "devel/gettext-runtime"
   add_port "devel/gobject-introspection"
  add_port "accessibility/atk"
  add_port "x11/libXcursor"
   add_port "graphics/jbigkit"
   add_port "graphics/tiff"
   add_port "graphics/jasper"
  add_port "graphics/gdk-pixbuf2"
    add_port "graphics/graphite2"
    add_port "devel/icu"
   add_port "print/harfbuzz"
      add_port "x11-fonts/mkfontscale"
     add_port "x11-fonts/mkfontdir"
    add_port "x11-fonts/font-bh-ttf"
    add_port "x11-fonts/dejavu"
    add_port "x11-fonts/encodings"
    add_port "x11-fonts/font-misc-ethiopic"
    add_port "x11-fonts/font-misc-meltho"
   add_port "x11-fonts/xorg-fonts-truetype"
  add_port "x11-toolkits/pango"
 add_port "graphics/gtk-update-icon-cache"
  add_port "devel/talloc"
  add_port "devel/tevent"
  add_port "databases/tdb"
 add_port "net/samba-nmblookup"
 add_port "security/libssh"
  add_port "x11/xf86dgaproto"
 add_port "x11/libXxf86dga"
  add_port "x11/recordproto"
 add_port "x11/libXtst"
  add_port "x11/dmxproto"
 add_port "x11/libdmx"
 add_port "x11/xdpyinfo"
  add_port "graphics/libGLU"
 add_port "graphics/freeglut"
 add_port "graphics/glew"
 add_port "graphics/mesa-demos"
 add_port "databases/sqlite3"
 add_port "databases/py-sqlite3"
 add_port "databases/mysql56-client"
  add_port "x11/scrnsaverproto"
 add_port "x11/libXScrnSaver"
 add_port "devel/sdl20"
 add_port "graphics/giflib"
 add_port "graphics/webp"
  add_port "graphics/aalib"
  add_port "devel/sdl12"
 add_port "graphics/sdl_image"
 add_port "www/libmicrohttpd"
 add_port "multimedia/libvdpau"
 add_port "multimedia/libva"
 add_port "net/samba-libsmbclient"
 add_port "multimedia/librtmp"
  add_port "security/libgpg-error"
  add_port "security/libgcrypt"
 add_port "multimedia/libbdplus"
 add_port "multimedia/libaacs"
 add_port "multimedia/libbluray"
 add_port "multimedia/libcec"
# add_port "audio/libao"
# add_port "audio/shairplay"
 add_port "devel/libplist"
 add_port "devel/yajl"
 add_port "textproc/libxslt"
 add_port "textproc/tinyxml"
 add_port "audio/taglib"
  add_port "audio/libogg"
 add_port "audio/libvorbis"
  add_port "audio/flac"
 add_port "audio/libsndfile"
 add_port "audio/libsamplerate"
 add_port "multimedia/libmpeg2"
 add_port "audio/libmodplug"
# add_port "devel/libltdl"
 add_port "x11-toolkits/gtk20" "WITHOUT=\"CUPS\""
 add_port "converters/recode"
   add_port "converters/p5-Unicode-String"
  add_port "converters/p5-Unicode-Map8"
 add_port "converters/enca"
 add_port "converters/fribidi"
 add_port "devel/boost-libs"
  add_port "dns/libidn"
  add_port "security/libtasn1"
  add_port "security/p11-kit"
   add_port "math/gmp"
  add_port "security/nettle"
  add_port "security/trousers"
 add_port "security/gnutls"
  add_port "audio/libcddb"
 add_port "sysutils/libcdio"
 add_port "multimedia/libass"
 add_port "devel/libltdl"
 add_port "net/libnfs"
add_port "multimedia/kodi" "WITH=\"NONFREE\" WITHOUT=\"AVAHI AIRPLAY AIRTUNES PULSEAUDIO\""

#### End of port list section ####

cleanup_ports () {
		# When port are build, they install build dependency that are not usefull for running the port
		# The list of build-only package to be delete can be found like this:
		# Fresh generate a BSDRP image, and copy packages.info to packages.info.first
		# Restart a BSDRP image build with the "-b" option
		# diff packages.info.first packages.info
		set +e
        	CR 'env ASSUME_ALWAYS_YES=true pkg delete -g nvidia-driver* cmake* evieext* gperf* bdftopcf* nasm* autoconf* automake* gmake* libtool* libcheck* xorg-macro* makedepend* gawk* help2man* p5-gettext* p5-XML-Parser* glproto* intltool*'
		# usr/local/lib/perl5 : Dirty hack
		#   pkg: rmdir(/usr/local/lib/perl5/5.14/perl/man/man3/): Directory not empty
		#   pkg didn't delete all MAN1 page related to perl too
		[ -d ${NANO_WORLDDIR}/usr/local/lib/perl5 ] && rm -rf ${NANO_WORLDDIR}/usr/local/lib/perl5
		[ -f ${NANO_WORLDDIR}/usr/local/man/man1/perl.1 ] && rm ${NANO_WORLDDIR}/usr/local/man/man1/perl*
		set -e
}

customize_cmd cleanup_ports

# BSD Media Center custom function
BSDMC_custom () {
	# Replace BSDRP_VERSION in /boot/brand.4th with the version number in etc/version
	sed -i "" -e /BSDRP_VERSION/s//`cat ${NANO_WORLDDIR}/etc/version`/ ${NANO_WORLDDIR}/boot/brand.4th

	# Copy nvidia-driver package
	if ls ${NANO_OBJ}/ports/packages/All/nvidia-driver*.txz > /dev/null 2>&1; then
		cp -v ${NANO_OBJ}/ports/packages/All/nvidia-driver*.txz ${NANO_WORLDDIR}/root/
	fi
	# Disable reverse DNS in sshd:
	echo "UseDNS no" >> ${NANO_WORLDDIR}/etc/ssh/sshd_config
	# Update login.conf db
	chroot ${NANO_WORLDDIR} /bin/sh -exc \
	'cap_mkdb /etc/login.conf'

	# relocate /root/.ssh to /etc/dot.root.ssh
	# This permit to save ssh keys
	mkdir -p ${NANO_WORLDDIR}/etc/dot.ssh.root
	ln -s ../etc/dot.ssh.root ${NANO_WORLDDIR}/root/.ssh

	# Add KODI user with home to /usr/local/etc/kodi
	chroot ${NANO_WORLDDIR} /bin/sh -exc \
    'echo "kodi::0:french:::KODI User:/usr/local/etc/kodi:csh:kodi" | adduser -f -'
	# Add kodi user to other group
	chroot ${NANO_WORLDDIR} /bin/sh -exc 'pw usermod kodi -G operator,dialer'
	cp ${NANO_WORLDDIR}/root/.cshrc ${NANO_WORLDDIR}/usr/local/etc/kodi
	cp ${NANO_WORLDDIR}/root/.complete ${NANO_WORLDDIR}/usr/local/etc/kodi
	chroot ${NANO_WORLDDIR} /bin/sh -exc \
    'chown -R kodi:wheel /usr/local/etc/kodi'

	# Fix an hal/Consolekit missing folders:
	# The problem is with cpio that didn't copy empty dir, then this step is useless :-(
	FOLDERS_TO_CREATE='
usr/local/share/hal/fdi/preprobe
usr/local/lib/ConsoleKit/run-seat.d
usr/local/lib/ConsoleKit/run-session.d
'
	for c in ${FOLDERS_TO_CREATE}
	do	
		if [ -d ${NANO_WORLDDIR}/$c ]; then
			echo "Folder ${NANO_WORLDDIR}/$c allready exist"
			echo "check:"
			ls ${NANO_WORLDDIR}/usr/local/share/hal/fdi
		else
			echo "Creating ${NANO_WORLDDIR}/$c"
			if ! mkdir -p ${NANO_WORLDDIR}/$c ; then
				echo "Error: Can't create it!"
			fi
		fi
	done

	# turn on noatime for /cfg
	sed -i "" -e "/cfg/s/rw/rw,noatime/" ${NANO_WORLDDIR}/etc/fstab
	# Add /data partition to fstab (config script use it for archiving old configurations)
    echo "/dev/ufs/${NANO_LABEL}s4 /data ufs rw,noauto 2 2" >> ${NANO_WORLDDIR}/etc/fstab
	# There is a problem around june 2014 with nanobsd: It didn't generate anymore the /data directory
	[ -d ${NANO_WORLDDIR}/data ] || mkdir -p ${NANO_WORLDDIR}/data

	# turn on procfs (needed by hal)
	echo "proc /proc procfs rw 0 0" >> ${NANO_WORLDDIR}/etc/fstab

	# relocate /var/cron to /etc/cron
	# This permit to save crontab (only /etc and /usr/local/etc are saved)
	mkdir -p ${NANO_WORLDDIR}/etc/cron
	rm -rf ${NANO_WORLDDIR}/var/cron
	ln -s ../etc/cron ${NANO_WORLDDIR}/var/cron	
	
	# Compress the kernel (save 3Mb)
	if [ -f ${NANO_WORLDDIR}/boot/kernel/kernel ]; then
		if ! gzip -v9 ${NANO_WORLDDIR}/boot/kernel/kernel; then
			echo "Error during zipping the kernel"
		fi
	fi
	# Remove some of the folders
	FOLDERS_TO_REMOVE='
usr/local/man
usr/local/info
usr/local/share/doc
usr/local/share/examples
usr/local/share/gir-1.0
usr/local/share/gtk-doc
usr/local/share/licenses
usr/local/share/mesa-demos
usr/include
usr/share/examples
usr/share/pc-sysinstall
usr/share/groff_font
usr/share/tmac
usr/share/me
usr/share/info
usr/share/man
usr/share/openssl
usr/libdata/lint
usr/libdata/ldscripts
'
	for c in $FOLDERS_TO_REMOVE
	do	
		if [ -d ${NANO_WORLDDIR}/$c ]
		then
			echo "Removing ${NANO_WORLDDIR}/$c"
			if ! rm -rf ${NANO_WORLDDIR}/$c ; then
				echo "Error: Can't remove it!"
			fi
		fi
	done

	# Need to remove all file in /usr/local/include expect python
	(
	cd  ${NANO_WORLDDIR}/usr/local/include
	for r in `ls | grep -v python`; do
		rm -rf $r
	done
	)	


	# Remove some files
    FILES_TO_REMOVE='
boot/boot1.efi
boot/boot1.efifat
boot/loader.efi
sbin/hastd
sbin/hastctl
usr/sbin/bhyve
usr/sbin/bhyvectl
usr/sbin/bhyveload
usr/sbin/ctladm
usr/bin/ctlstat
usr/share/misc/magic.mgc
usr/share/misc/termcap.db
'
    for c in ${FILES_TO_REMOVE}
    do
        if [ -f ${NANO_WORLDDIR}/$c ]
        then
			echo "Removing ${NANO_WORLDDIR}/$c"
            if ! rm -rf ${NANO_WORLDDIR}/$c ; then
				echo "Error: Can't remove it!"
			fi
        fi
    done

	# All ports are compiled, then we can remove all TOOLCHAIN files
	# This save about 25MB.
	# The list of these files was generated by a the output of:
	# usr/src/tools/tools/build_option_survey
	# Because it's a very time consuming script, output are online:
	# http://phk.freebsd.dk/misc/build_options_stable_8_210741/

TOOLCHAIN_TO_REMOVE='
usr/bin/addr2line
usr/bin/gnu-ar
usr/bin/as
usr/bin/ld
usr/bin/nm
usr/bin/objcopy
usr/bin/gnu-ranlib
usr/bin/readelf
usr/bin/size
usr/bin/strings
usr/bin/strip
usr/bin/cc
usr/bin/gcc
usr/bin/gcpp
usr/bin/cpp
usr/bin/c++
usr/bin/g++
usr/bin/CC
usr/bin/c++filt
usr/bin/gcov
usr/bin/gdb
usr/bin/gdbtui
usr/bin/kgdb
usr/bin/ar
usr/bin/ranlib
usr/bin/c89
usr/bin/c99
usr/bin/sum
usr/bin/compile_et
usr/bin/ctags
usr/bin/file2c
usr/bin/gprof
usr/bin/od
usr/bin/indent
usr/bin/m4
usr/bin/lex
usr/bin/lex++
usr/bin/flex
usr/bin/flex++
usr/bin/mt
usr/bin/mkstr
usr/bin/rpcgen
usr/bin/unifdef
usr/bin/unifdefall
usr/bin/nvi
usr/bin/vgrind
usr/bin/lint
usr/bin/xstr
usr/bin/lzdec
usr/bin/yacc
usr/bin/yyfix
usr/bin/byacc
usr/bin/lzdec
usr/bin/clang
usr/bin/clang++
usr/bin/clang-cpp
usr/bin/clang-tblgen
usr/bin/tblgen

usr/bin/crunchgen
usr/bin/crunchide
usr/libexec/cc1
usr/libexec/cc1plus
usr/libexec/cc1obj
usr/libexec/vfontedpr
usr/libexec/lint1
usr/libexec/lint2
usr/sbin/btxld
usr/sbin/config
usr/sbin/i2c
usr/sbin/rmt
usr/share/misc/gprof.flat
usr/share/misc/gprof.callg
usr/share/misc/vgrindefs
usr/share/misc/vgrindefs.db
usr/share/tmac/tmac.vgrind
'
    for c in $TOOLCHAIN_TO_REMOVE
    do
        if [ -f ${NANO_WORLDDIR}/$c ]; then
            echo "Removing ${NANO_WORLDDIR}/$c"
            if ! rm -rf ${NANO_WORLDDIR}/$c ; then
                echo "Error: Can't remove it!"
            fi
			# look for associated man page and delete it too
			if ! find ${NANO_WORLDDIR}/usr/share/man -name `basename $c`".*.gz" -exec rm -- {} +; then
				echo "no man page for $c"
			fi
		else
			echo "Missing file to delete: $c"
        fi
    done
	
	# Move termcap.small file
	if [ -f ${NANO_WORLDDIR}/etc/termcap.small ]; then
		mv ${NANO_WORLDDIR}/etc/termcap.small ${NANO_WORLDDIR}/usr/share/misc/termcap.db
	fi

	# Kill all .a's that are installed with TOOLCHAIN (remove 33MB)
    find ${NANO_WORLDDIR} -type f -name \*.a | xargs rm

	# Moving kerned & world debug symbols into debug.tar.xz file
	if [ -f ${NANO_WORLDDIR}/boot/kernel/kernel.symbols ]; then
		if [ ! -d ${NANO_WORLDDIR}/usr/lib/debug/boot/kernel ]; then
			mkdir -p ${NANO_WORLDDIR}/usr/lib/debug/boot/kernel
		fi
		mv ${NANO_WORLDDIR}/boot/kernel/*.symbols ${NANO_WORLDDIR}/usr/lib/debug/boot/kernel
		tar cfvZ ${NANO_OBJ}/debug.tar.xz -C ${NANO_WORLDDIR}/usr/lib debug
	fi
	[ -d ${NANO_WORLDDIR}/usr/lib/debug ] && rm -rf ${NANO_WORLDDIR}/usr/lib/debug
	# strip binaries for ports (tips from FreeNAS 8)
	pprint 4 "Stripping binaries and libraries"
	for dir in $(find ${NANO_WORLDDIR}/ -name '*bin' -or -name 'lib' -maxdepth 3); do
		for f in $(find $dir -type f); do
			strip 2>/dev/null $f || :
		done
	done	

	# Configure autologon/autostart of X
	echo "P|Pc|Pc console:\\" >> ${NANO_WORLDDIR}/etc/gettytab
    echo "    :ht:np:sp#115200:" >> ${NANO_WORLDDIR}/etc/gettytab

	# Don't know why there is this folder at the end
	[ -d ${NANO_WORLDDIR}/tmp/hsperfdata_root ] && rm -rf  ${NANO_WORLDDIR}/tmp/hsperfdata_root

	# Generate package inventory
	CR 'pkg info' > ${NANO_OBJ}/packages.info

}

# Standard vga console, but permit serial port to be use as vt100 console
bsdrp_console_vga () {
	# Set serial speed ((3wire is available since 11 only)
	sed -i "" -e /tty[du]0/s/std.9600/std.${COM_SPEED}/ ${NANO_WORLDDIR}/etc/ttys
	# Tell loader to use vga and serial and set serial speed (boot0 will be vga only)
	echo "-S${COM_SPEED} -Dh" > ${NANO_WORLDDIR}/boot.config
}

# From FreeNAS 8
shrink_md_fbsize()
{
    # We have a lot of little files on our memory disks. Let's decrease
    # the block and frag size to fit more little files on them (this
    # halves our space requirement by ~50% on /etc and /var on 8.x --
    # and gives us more back on 9.x as the default block and frag size
    # are 4 times larger).
    sed -i '' -e 's,-S -i 4096,-S -i 4096 -b 4096 -f 512,' \
        ${NANO_WORLDDIR}/etc/rc.initdiskless
}
customize_cmd shrink_md_fbsize

# Install Custom scripts and config files
customize_cmd cust_install_files

# Need to execute the BSDMC_custom after the cust_install_files
customize_cmd BSDMC_custom

# Allow root login via ssh
customize_cmd cust_allow_ssh_root

